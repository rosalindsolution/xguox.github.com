<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JSON | XguoX]]></title>
  <link href="http://xguox.github.com/blog/categories/json/atom.xml" rel="self"/>
  <link href="http://xguox.github.com/"/>
  <updated>2014-02-18T16:31:42+08:00</updated>
  <id>http://xguox.github.com/</id>
  <author>
    <name><![CDATA[XguoX]]></name>
    <email><![CDATA[golvinlu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[你可能不知道的JSON.stingify()]]></title>
    <link href="http://xguox.github.com/blog/2013/02/01/what-you-might-not-know-about-json-dot-stringify/"/>
    <updated>2013-02-01T18:06:00+08:00</updated>
    <id>http://xguox.github.com/blog/2013/02/01/what-you-might-not-know-about-json-dot-stringify</id>
    <content type="html"><![CDATA[<p>几乎所有开发人员都会花一些时间在JavaScript上,有些时候是在使用JSON.stingify(以及与之相对应的,JSON.parse).JSON &ndash; Javascript Object Notation &ndash; 已经成为许多开发人员理想的数据交换格式(the go-to data-interchange format)&ndash; 并且有许多语言支持序列化为JSON,而不仅仅只有JavaScript本身.如果哪天你半夜起来又无法入睡了,可以查一查关于<a href="http://en.wikipedia.org/wiki/JSON#History">JSON</a>的历史(tl;dr – Douglas Crockford is the brain behind it)</p>

<!--more-->


<p>在写JavaScript的时候,我们用<code>JSON.stringify</code>将某个值序列化为一个字符串值来表示一个对象.</p>

<p>```javascript
JSON.stringify({</p>

<pre><code>name: "Jim Cowart",
country: "Jimbabwe"
</code></pre>

<p>});
// 输出结果:  &ldquo;{"name&rdquo;:&ldquo;Jim Cowart&rdquo;,&ldquo;country&rdquo;:&ldquo;Jimbabwe&rdquo;}"</p>

<p>JSON.stringify(&ldquo;Oh look, a string!&rdquo;);
// 输出结果: &ldquo;"Oh look, a string!&rdquo;"</p>

<p>JSON.stringify([1,2,3,4,&ldquo;open&rdquo;,&ldquo;the&rdquo;,&ldquo;door&rdquo;]);
// 输出结果: &ldquo;[1,2,3,4,"open&rdquo;,&ldquo;the&rdquo;,&ldquo;door&rdquo;]&ldquo;
```
我不会反复地讨论关于序列化的规则,在<a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/JSON/stringify">这里</a>你可以读到更多相关的.但最基本的,你需要知道下面这些:</p>

<ul>
<li><code>undefined</code> 值、函数或者XML值会被忽略,除非当&hellip;</li>
<li>如果你的数组当中含有 <code>undefined</code>值,函数或XML值,该数组中的这些值将会被当成 <code>null</code></li>
</ul>


<p>Let&rsquo;s see about that:</p>

<p>```javascript
JSON.stringify({</p>

<pre><code>doStuff: function() { },
doThings: [ function() {}, undefined ]
</code></pre>

<p>});
// 输出结果:  &ldquo;{"doThings&rdquo;:[null,null]}&ldquo;
```</p>

<blockquote><p>&ldquo;太棒了,Jim.我知道了.它是一种数据交换格式.而行为是不会被序列化的.这些天我使用的大多数库都是在底层为我处理序列化(Most of the libraries I use these days handle serializing for me under the hood.).那为什么要专门写一篇post关于 JSON.stringify 呢?&rdquo;</p></blockquote>

<p>这个我知道,但是有一些实用的技巧迟早我们会需要用上的.Many of the larger applications I&rsquo;ve worked on recently have had debug flags that can be flipped to enable various console logging from different components active on the page.
而我们明显不希望总是通过无数行<code>console.log</code>来筛选信息 &ndash; 但当这变得有需要的时候,让它的可读性更高是不是更nice呢?</p>

<p>```javascript
// what if this:
&lsquo;{&ldquo;name&rdquo;:&ldquo;Jim Cowart&rdquo;,&ldquo;location&rdquo;:{&ldquo;city&rdquo;:{&ldquo;name&rdquo;:&ldquo;Chattanooga&rdquo;,&ldquo;population&rdquo;:167674},&ldquo;state&rdquo;:{&ldquo;name&rdquo;:&ldquo;Tennessee&rdquo;,&ldquo;abbreviation&rdquo;:&ldquo;TN&rdquo;,&ldquo;population&rdquo;:6403000}},&ldquo;company&rdquo;:&ldquo;appendTo&rdquo;}&rsquo;</p>

<p>// could be formatted like this, automagically?
&ldquo;{</p>

<pre><code>"name": "Jim Cowart",
"location": {
    "city": {
        "name": "Chattanooga",
        "population": 167674
    },
    "state": {
        "name": "Tennessee",
        "abbreviation": "TN",
        "population": 6403000
    }
},
"company": "appendTo"
</code></pre>

<p>}&ldquo;
```
事实上,JSON.stringify可以传入3个参数(JSON.stringify(value [, replacer [, space]]).其中,第三个参数 &ndash; "space&rdquo; &ndash; 允许你指定一个字符串字符、或者使用缩进、或是一个数字.如果你传的是一个数字,那相应的空格数(最大为10)会被作为缩进量</p>

<p>```javascript
var person = {</p>

<pre><code>name: "Jim Cowart",
location: {
    city: {
        name: "Chattanooga",
        population: 167674
    },
    state: {
        name: "Tennessee",
        abbreviation: "TN",
        population: 6403000
    }
},
company: "appendTo"
</code></pre>

<p>};
//如果你希望缩进量为2 个空格,
// 你可以这么干:
JSON.stringify(person, null, 2);
/* produces:
&ldquo;{
  "name&rdquo;: &ldquo;Jim Cowart&rdquo;,
  &ldquo;location&rdquo;: {</p>

<pre><code>"city": {
  "name": "Chattanooga",
  "population": 167674
},
"state": {
  "name": "Tennessee",
  "abbreviation": "TN",
  "population": 6403000
}
</code></pre>

<p>  },
  &ldquo;company&rdquo;: &ldquo;appendTo&rdquo;
}&ldquo;
<em>/
// 如果你希望使用 tab 缩进,那么
// 你可以传入 \t 作为第三个参数
// 以此来告别空格缩进
JSON.stringify(person, null, &rdquo;\t");
/</em>输出结果:
&ldquo;{</p>

<pre><code>"name": "Jim Cowart",
"location": {
    "city": {
        "name": "Chattanooga",
        "population": 167674
    },
    "state": {
        "name": "Tennessee",
        "abbreviation": "TN",
        "population": 6403000
    }
},
"company": "appendTo"
</code></pre>

<p>}&ldquo;
*/
<code>
那么-第二个参数呢?在上面的例子中简单地传了一个</code>null```.关于 "replacer&rdquo; 参数-它可以是一个数组或者是一个函数.如果是一个数组,它将只输出你在该数组中所想要包含的keys.</p>

<p>```javascript
// 假定 person对象是上一例子中的那个,
JSON.stringify(person, [&ldquo;name&rdquo;, &ldquo;company&rdquo;], 4);
/* 输出结果:
&ldquo;{</p>

<pre><code>"name": "Jim Cowart",
"company": "appendTo"
</code></pre>

<p>}&ldquo;
*/
```
如果这 "replacer&rdquo; 参数传入的是一个函数,那么这个函数需要有两个参数:key 和 value :</p>

<p>```javascript
// a bit contrived, but it shows what&rsquo;s possible
// FYI &ndash; 被序列化的值是第一个传给replacerFn的东西, 也即是这个对象的每一个key,因此需要检查key的真假.
var replacerFn = function(key, value) {</p>

<pre><code>if(!key || key === 'name' || key === 'company') {
    return value;
}
return; //返回 undefined 并忽略 
</code></pre>

<p>}
JSON.stringify(person, replacerFn, 4);
/* produces:
&ldquo;{</p>

<pre><code>"name": "Jim Cowart",
"company": "appendTo"
</code></pre>

<p>}&ldquo;
<em>/
```
你可以使用替换方法来处理得到 </em><strong>黑名单</strong><em>成员的姓名(与此相对应的是,使用</em><strong>白名单</strong>*数组作为"replacer&rdquo; 参数).我发现这种方法是有用的,尤其当我需要迅速并且有针对性的得到一个DOM元素的值,但我希望阻止一个序列化循环引用的异常(当我drank some antifreeze 或是试图做些荒谬的做法如JSON.stringify(document.body)的时候).Feel free to browse <a href="http://jsfiddle.net/ifandelse/6Yj5h/">this fiddle</a> for a simple example of using a replacer function to blacklist based on member name(s).</p>

<p>当然,另一个得到自定义某个对象的JSON序列化的选择是在对象中使用"toJSON"方法</p>

<p>```javascript
var person = {</p>

<pre><code>name: "Jim Cowart",
location: {
    city: {
        name: "Chattanooga",
        population: 167674
    },
    state: {
        name: "Tennessee",
        abbreviation: "TN",
        population: 6403000
    }
},
company: "appendTo",
toJSON: function () {
    return {
        booyah : this.name + ' , employer: ' + this.company
    };
}
</code></pre>

<p>};</p>

<p>// 上面的toJSON返回的值
// 实际上被字符串化的:
JSON.stringify(person, null, 4);
/* produces:
&ldquo;{</p>

<pre><code>"booyah": "Jim Cowart , employer: appendTo"
</code></pre>

<p>}&ldquo;
*/
```</p>

<blockquote><p>&ldquo;说真的,Jim.比起在控制台写更漂亮的JSON我们有更重要的事情要做.&rdquo;</p></blockquote>

<p>You don&rsquo;t have to convince me, I&rsquo;m with you 110%. 但我会说,当你为了调试已发布的信息的可视性或者logging websocket payloads而 wire-tapping a message bus 的时候更好看的JSON格式化会让一切都不同.(囧 、o(╯□╰)o)能够通过白名单替换数组(或者黑名单替换函数)来有选择的序列化对象,可以很方便地在DOM元素/事件上帮助你跟踪问题,或者简单地让你在复杂的交互上有更好的可视化,without de-railing you with serialization exceptions.</p>

<p>原文来自 Jim Cowart ,<a href="http://freshbrewedcode.com/jimcowart/2013/01/29/what-you-might-not-know-about-json-stringify/?utm_source=javascriptweekly&amp;utm_medium=email">What You Might Not Know About JSON.stringify()</a></p>

<p>XguoX<br/>
&ndash; Actually,其实这个在Nicholas C.Zakas的《JavaScript高级程序设计》第20章关于JSON的介绍讲的也很详细.比我这蹩脚翻译要好得多.</p>
]]></content>
  </entry>
  
</feed>
