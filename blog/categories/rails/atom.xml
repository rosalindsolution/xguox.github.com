<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | XguoX]]></title>
  <link href="http://xguox.github.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://xguox.github.com/"/>
  <updated>2014-03-16T20:59:43+08:00</updated>
  <id>http://xguox.github.com/</id>
  <author>
    <name><![CDATA[XguoX]]></name>
    <email><![CDATA[golvinlu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[是在扯不等使的事儿吗?]]></title>
    <link href="http://xguox.github.com/blog/2014/01/04/heroku-rails-do4fun-theme/"/>
    <updated>2014-01-04T21:08:09+08:00</updated>
    <id>http://xguox.github.com/blog/2014/01/04/heroku-rails-do4fun-theme</id>
    <content type="html"><![CDATA[<h3>Rails</h3>

<p>发觉之前又犯二了, 在 console 里头错把 delete 当 destroy 删除一条记录, 把数据库搞得一坨乱. 还是一直纠结 has_many 的 dependent 参数不是已经设置了 destroy 了,肿么不会关联上!!!  原来是这个地方烧饼lity 了!</p>

<p>区别</p>

<h3><a href="http://do4fun.herokuapp.com/">do4fun </a></h3>

<p><a href="http://do4fun.herokuapp.com/">do4fun </a>这个项目进行了也有一段时间, 小有成型的样子.   今天忽然蛋疼把背景的整体色调从原本的略骚的橙红改成了现今的灰白.  布局没变.</p>

<p><img src="http://ww1.sinaimg.cn/mw690/62fdd4d5gw1ec7sglc154j21400p0jxy.jpg" alt="" /></p>

<p><img src="http://ww4.sinaimg.cn/mw690/62fdd4d5gw1ec7sg2wg9lj21400p07ed.jpg" alt="" /></p>

<p>actually, 我还是略喜欢前者.  页面设计上总是没什么感觉啊!</p>

<p>另外又把 xguox.me 的主题换了,  这次用的是<a href="https://github.com/panks/fabric"> Theme fabric by Pankaj Kumar</a>, 没怎么调, 就只是换了背景图&hellip;</p>

<p>好吧, 我不会告诉你是因为换了这个主题才想要把<a href="http://do4fun.herokuapp.com/">do4fun </a> 的对调过来了.</p>

<h3>Heroku</h3>

<p>最后扯扯 heroku ,  除了访问速度在天朝略微蛋疼外 heroku 真心是个好东西, 每次有什么想玩的都是在 heroku  上部署实践. 包括这次的 <a href="http://do4fun.herokuapp.com/">do4fun </a> 项目. 尤其很多插件都不错.</p>

<p>不过最近部署 这个Rails 4 的时候出了点状况, 在 应该是 ckeditor 的问题, 在 <a href="http://stackoverflow.com/questions/20811788/deploy-rails4-with-ckeditor-to-heroku-failed-with-time-out-assetsprecompile">StackOverflow</a> 上提问也没结果.</p>

<p>如果访问速度能给力些的话, 跟 linode 之流抗衡那是杠杠的!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails4 Devise Strong Parameters]]></title>
    <link href="http://xguox.github.com/blog/2013/12/20/rails4-devise-strong-parameters/"/>
    <updated>2013-12-20T14:36:00+08:00</updated>
    <id>http://xguox.github.com/blog/2013/12/20/rails4-devise-strong-parameters</id>
    <content type="html"><![CDATA[<p>重拾 Rails, 然后用了 devise 这个 Gem ,遂继续笔记之</p>

<p><strong>Devise</strong> 在 ruby 社区里头几乎都称之为一门<strong>重</strong>炮, 当然了, 重换来的是功能丰富, 用户注册登录相关的一个 Gem 搞定, 只是要把源码搞透彻那必须流弊的人才干得来!</p>

<p>现阶段对我来说, 知道怎么用就 OK 了.</p>

<p>但是, 其实也还算不上完全知道怎么用. 遂笔记 MARK 一发.</p>

<p>参照官方的<strong>Getting started</strong><br/>
添加 Gem<br/>
<code>gem 'devise'</code><br/>
安装 Gem<br/>
<code>bundle</code><br/>
跑 generator<br/>
<code>rails g devise:install</code><br/>
and then 是一坨的提示，照着撸完，之后<br/>
<code>rails g devise user</code><br/>
<code>rake db:migrate</code><br/>
<code>rails generate devise:views</code></p>

<p>至于如果需要添加 index  show 等其他一些 action 的话直接再 generate 一个 users controller
不过 在<code>routes.rb</code>中需要加一句 (在<code> devise_for :users
</code>之后)
  <code>resources :users, only: [:index, :show]</code></p>

<p>然后是添加其他字段, add username migration 之后</p>

<!-- more -->


<p>```ruby
class ApplicationController &lt; ActionController::Base
  before_action :configure_permitted_parameters, if: :devise_controller?</p>

<p>  protected</p>

<p>  def configure_permitted_parameters</p>

<pre><code>devise_parameter_sanitizer.for(:sign_up) &lt;&lt; :username
</code></pre>

<p>  end</p>

<p>end
```</p>

<h3>strong parameter</h3>

<p>印象中 rails3 下如
<code>Post.new(params[:post])</code> 是可以正常运作的,</p>

<p>但是, 在 rails4 当中就报错</p>

<p>```
ActiveModel::ForbiddenAttributesError in PostsController#create</p>

<p>```</p>

<p>在 Rails4 以后要改成</p>

<p><code>ruby
Post.new(params.require(:post).permit(:title, :content))
</code>
 相当于以往的 <strong>attr_accessible</strong><br/>
把工作从 model 转移到 controller 了, 规避了以前的 mass assignment 问题, 又想起以前 github 中招 XD</p>

<p>摘抄官方 guides</p>

<p>```ruby
class PeopleController &lt; ActionController::Base
  # This will raise an ActiveModel::ForbiddenAttributes exception
  # because it&rsquo;s using mass assignment without an explicit permit
  # step.
  def create</p>

<pre><code>Person.create(params[:person])
</code></pre>

<p>  end</p>

<p>  # This will pass with flying colors as long as there&rsquo;s a person key
  # in the parameters, otherwise it&rsquo;ll raise a
  # ActionController::ParameterMissing exception, which will get
  # caught by ActionController::Base and turned into that 400 Bad
  # Request reply.
  def update</p>

<pre><code>person = current_account.people.find(params[:id])
person.update_attributes!(person_params)
redirect_to person
</code></pre>

<p>  end</p>

<p>  private</p>

<pre><code># Using a private method to encapsulate the permissible parameters
# is just a good pattern since you'll be able to reuse the same
# permit list between create and update. Also, you can specialize
# this method with per-user checking of permissible attributes.
def person_params
  params.require(:person).permit(:name, :age)
end
</code></pre>

<p>end
```
所以上边要先把 username 在 params 给 permit 了.</p>

<p>暂时是这些先 MARK</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 3 Remote Links and Forms Part 2: Data-type (With jQuery)]]></title>
    <link href="http://xguox.github.com/blog/2012/07/12/rails-3-remote-links-and-forms-part-2-data-type-with-jquery/"/>
    <updated>2012-07-12T11:28:00+08:00</updated>
    <id>http://xguox.github.com/blog/2012/07/12/rails-3-remote-links-and-forms-part-2-data-type-with-jquery</id>
    <content type="html"><![CDATA[<p>自从写了<a href="http://www.alfajango.com/blog/Rails-3-remote-links-and-forms/">Rails 3 Remote Links &amp; Forms Definitive Guide</a>有一个问题也接踵而至:</p>

<h4>我们该如何使远程链接或者表单取回 js.erb而不是一个html的partial?</h4>

<p>在上一篇中,我们请求一个html partial并通过ajax回调插入到页面中.但如果我们想要javascript被执行?或者XML、JSON被解析?又或者显示出纯文本呢?</p>

<!-- more -->


<h2>Equal parts Rails &amp; jQuery</h2>

<p>首先,我们需要明白Rails3中 :remote => true 的过程. It&rsquo;s equal parts Rails and jQuery magic.但表担心,这只是一个小魔术,捆绑成4个步骤的过程: 1. Rails告诉jQuery,&ldquo;哥们,把你的ajax绑定到这霸气的表单/链接&rdquo;,通过 :remote => true 这个选项. 2. jQuery劫持?元素的click/submit事件并绑定到.ajax()方法.现在,元素提交通过使用ajax取代在浏览器中加载一个新页面. 3. 当这个元素被click/submit时,Rails接收到ajax网页请求并响应以一些内容. 4. jQuery接收到响应的内容有.ajax()方法hi-jacked在我们的的元素中,并为我们提供回调用以在页面中处理这个响应.</p>

<p>在这篇文章中,我们正在探索各种各样的、使我们能够指定ajax的响应格式并据此做出处理的方式,这实际上涵盖上述所有4个步骤.</p>

<h2>步骤 1 &amp; 2:设置data-type</h2>

<p>当浏览器发送web请求,在浏览器到服务器,服务器返回浏览器的过程中,部分 请求/响应 的header能够指定内容的格式.当在浏览器中加载一个页面,内容的类型通常从url的拓展可以推断得出.尽管如此,jQuery能够直接在ajax请求的header部分设置我们所想要的data-type.</p>

<h2>jQuery允许dataType参数</h2>

<p>jQuery的.ajax()方法提供一个可选的dataType参数用以指定我们所想要的响应data-type.这允许jQuery在请求的HTTP Accept header指定格式类型,然后封装响应的内容到适当的数据对象使得更容易操作.</p>

<blockquote><p>在jQuery1.4中,如果你不指定响应的data-type,jQuery会检查响应的MIME类型头并智能的猜测其为data-type,动态的转换响应对象的data-type</p></blockquote>

<p>在.ajax()文档页面有更多的信息,但基本的类型有如下:</p>

<table>
  <tbody><tr>
    <th>dataType</th>
    <th>Behavior</th>
  </tr>
  <tr>
    <td>"xml"</td>
    <td>返回一个能呗jQuery处理的XML文档</td>
  </tr>
  <tr>
    <td>"html"</td>
    <td>返回纯文本的html,调用标记中的所有&lt; script&gt;标签</td>
  </tr>
  <tr>
    <td>"script"</td>
    <td>Evaluates the response as JavaScript并以纯文本格式返回</td>
  </tr>
  <tr>
    <td>"json"</td>
    <td>Evaluates the response as JSON 并返回一个javascript对象</td>
  </tr>
  <tr>
    <td>"jsonp"</td>
    <td>在一个JSON块中使用JSONP加载响应</td>
  </tr>
  <tr>
    <td>"text"</td>
    <td>返回一个纯文本字符串</td>
  </tr>
</tbody></table>


<h2>Rails.js设置dataType参数</h2>

<p>Rails UJS驱动通过我们在远程链接/表单中指定的data-type属性来设置我们的ajax dataType参数.如果我们不明确地指定data-type,那默认的data-type将使用公有的$.ajaxSettings.如果我们没有提前设置它,那么一个通用的请求发送出后将会收到任意类型的响应.</p>

<p><code>javascript
dataType = element.attr('data-type') || ($.ajaxSettings &amp;&amp; $.ajaxSettings.dataType);
</code></p>

<p>老版本的UJS驱动会默认一个在script 中的data-type,而不是发送一个通用的请求.看上去,这像是一个明智的做法,但如果在我们controller的action中没有定义format.js的话, Rails将会抛出一个异常. 而在较新版本的UJS驱动中则简单地使用jQuery的'/&lsquo;默认dataType.这会告诉服务器,&ldquo;不管你收到什么都给我&rdquo;.然而,这会让controller响应以在Responder中所列出的第一种格式(见下一节).这样的话,如果 format.html 列在 format.js 前面的话,app会响应以HTML格式(这意味着将会尝试跳转到POST或DELETE方法的ajax请求).这并不是我们想要的.</p>

<p>所以在最新版本的UJS驱动中,我们找到如何设置默认情况,比如说,当它告诉服务器,&ldquo;尽管我更希望得到JS格式,但我会得到所有你得到的."这样,如果所有可用的响应格式包括format.js都被定义,那么返回的将会是JS格式.当然,如果format.js没有被定义,那controller将会继续按照列表顺序返回第一个.</p>

<p><code>
// Simplified for clarityif (dataType === undefined) {
  xhr.setRequestHeader('accept', '*/*;q=0.5, text/javascript');
}
</code></p>

<h2>步骤 3 :在Rails的controller中的响应</h2>

<p>现在我们已经有了一个ajax请求,同时,在该请求的header指定我们希望得到的data-type.我们的Rails app接收到这个请求,就会路由到相应的action,并渲染出一个响应.</p>

<p>我们的controller决定渲染些什么内容作为响应,以及是什么样的格式.respond_with 和 respond_to 这两个在Rails的Responder类中的方法会检查请求的 Accept 头(通过dataType设置)以渲染出适当的响应.</p>

<p>对于基于对象的data-types,如XML和JSON,我们通常会对其序列化并返回一个指定格式的对象.这就是Responder默认所做的.而对于给予内容的data-types,如JS或html,我们通常会渲染一个 js.erb 或 html.erb 文件.</p>

<blockquote><p>技术上,我们也能有一个自定义的 json.erb 或 xml.erb模板来渲染一个自定义的数据对象.Responder会查找这些模板,如果存在则渲染之.</p></blockquote>

<h2>步骤 4 : jQuery处理响应</h2>

<p>从上一篇文章可知,我们绑定了我们处理响应的jQuery代码在ajax:success,ajax:error,ajax:complete这些回调中.</p>

<p>现在,我们对于各种不同的data-types及如何设置它们有了新的认识,我们能够修改我们的响应回调来处理我们所想要的data-type.在上一篇文章中,我们的回调绑定处理了一个HTML响应.</p>

<p>处理HTML响应:</p>

<p>```
$(&lsquo;#i-want-html&rsquo;)  .bind(&lsquo;ajax:success&rsquo;, function(evt, data, status, xhr){</p>

<pre><code>var $this = $(this);

// Append response HTML (i.e. the comment partial or helper)
$('#comments').append(xhr.responseText);

// Clear out the form so it can be used again
$this.find('input:text,textarea').val('');

// Clear out the errors from previous attempts
$this.find('.errors').empty();
</code></pre>

<p>  })
  .bind(&lsquo;ajax:error&rsquo;, function(evt, xhr, status, error){</p>

<pre><code>// Display the errors (i.e. an error partial or helper)
$(this).find('.errors').html(xhr.responseText);
</code></pre>

<p>  });
```
同样的,我们能很轻易的修改上面的代码来处理JSON响应:</p>

<p>处理JSON请求:</p>

<p>```javascript
$(&lsquo;#i-want-json&rsquo;)  .bind(&lsquo;ajax:success&rsquo;, function(evt, data, status, xhr){</p>

<pre><code>var $this = $(this);

// do something with 'data' response object

$this.find('input:text,textarea').val('');
$this.find('.errors').empty();
</code></pre>

<p>  })
  .bind(&lsquo;ajax:error&rsquo;, function(evt, xhr, status, error){</p>

<pre><code>var responseObject = $.parseJSON(xhr.responseText),
    errors = $('&lt;ul /&gt;');

$.each(responseObject, function(){
  errors.append('&lt;li&gt;' + this + '&lt;/li&gt;');
})

$(this).find('.errors').html(errors);
</code></pre>

<p>});
```
最后,如果是要处理一个JS请求,则我们不需要绑定任何的回调函数.记住,如果是 data-type: &lsquo;script&rsquo; ,jQuery会自动执行页面中的JavaScript响应.</p>

<p>处理JS请求:</p>

<p><code>
//Nothing!
</code>
如果 我们的响应没有自动为我们执行,那我们的处理方式可能是像下面这样:</p>

<p><code>javascript
$('#i-want-js').bind('ajax:complete', function(evt, xhr, status){  eval(xhr.responseText);
});
</code>
注意,我们已经绑定了回调 ajax:complete 来取代ajax:success|error.这是因为,我们的success/error处理都在js.erb文件.</p>

<blockquote><p>上面的处理方式并不非完全和自动执行函数一致.上述的函数会在 $(&lsquo;#i-want-js&rsquo;) 元素的上下文执行我们的脚本,同时,jQuery在 $(window) 上下文自动执行我们的脚本.</p></blockquote>

<p>现在,让我们来个总结</p>

<h2>使用js.erb的例子</h2>

<p>就像上一篇文章,我们会创建一个comment并通过ajax提交.所不同的是,这次我们会响应以 js.erb</p>

<p>在controller中,我们会添加一些响应html、hs、json请求的功能.</p>

<p>comments_controller.rb</p>

<p>```ruby
class TestCommentsController &lt; ApplicationController  respond_to :html, :js
  &hellip;
  def create</p>

<pre><code>@comment = Comment.new( params[:comment] )

flash[:notice] = "Comment successfully created" if @comment.save
respond_with( @comment, :layout =&gt; !request.xhr? )
</code></pre>

<p>  end
end
```
如果你对Rails3的Responder不熟悉,下面的代码效果是一样的:</p>

<p>```ruby
class TestCommentsController &lt; ApplicationController &hellip;
  def create</p>

<pre><code>@comment = Comment.new( params[:comment] )

respond_to do |format|
  if @comment.save
    flash[:notice] = "Comment successfully created"
    format.html { redirect_to(@comment), :layout =&gt; !request.xhr? }
    format.js { render :js =&gt; @comment, :status =&gt; :created, :location =&gt; @comment, :layout =&gt; !request.xhr? }
  else
    format.html { render :action =&gt; "new", :layout =&gt; !request.xhr? }
    format.js { :js =&gt; @comment.errors, :status =&gt; :unprocessable_entity }
 end
</code></pre>

<p>  end
end
```
现在,我们来设定index页面来列出所有的comments,以及包括我们的ajax表单用以创建一个新comment.我们不需要在我们的表单中写任何data-type这鸽HTML5属性,Rails UJS会默认我们需要JS</p>

<p>index.html.erb</p>

<p>```html</p>

<div id="comments"></div>


<p>&lt;%= form_for :comment, :remote => true, :html => { :id => &lsquo;new-comment-form&rsquo; } do |f| %>
  &lt;%= f.text_area(:body) %>
  <div class="errors"></div>
  &lt;%= f.submit %>
&lt;% end %>
```
最后,我们需要创建 js.erb模板,该模板会被执行并插入响应到我们的页面中.</p>

<p>create.js.erb</p>

<p>```javascript
var el = $(&lsquo;#new-comment-form&rsquo;);
&lt;% if @comment.errors.any? %></p>

<p>  // Create a list of errors
  var errors = $(&lsquo;<ul />&rsquo;);</p>

<p>  &lt;% @comment.errors.full_messages.each do |error| %></p>

<pre><code>errors.append('&lt;li&gt;&lt;%= escape_javascript( error ) %&gt;&lt;/li&gt;');
</code></pre>

<p>  &lt;% end %></p>

<p>  // Display errors on form
  el.find(&lsquo;.errors&rsquo;).html(errors);</p>

<p>&lt;% else %></p>

<p>  // We could also render a partial to display the comment here
  $(&lsquo;#comments&rsquo;).append(&ldquo;&lt;%= escape_javascript(</p>

<pre><code>  simple_format( @comment.body )
) %&gt;");
</code></pre>

<p>  // Clear form
  el.find(&lsquo;input:text,textarea&rsquo;).val(&lsquo;&rsquo;);
  el.find(&lsquo;.errors&rsquo;).empty();</p>

<p>&lt;% end %>
```</p>

<h2>写在最后!</h2>

<p>重申一次,这里我们不需要绑定任何ajax回调.It just works.</p>

<blockquote><p>有时候,javascript响应不会像它本应该的那样执行,取而代之的是作为一个字符串返回.这通常意味着有在这个响应的javascript中有一些异常.这是很烦人的,但它不会从自动执行响应中抛出任何可见的javascript错误.</p></blockquote>

<p>See Rails js.erb Remote Response not Executing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 3 Remote Links and Forms: A Definitive Guide]]></title>
    <link href="http://xguox.github.com/blog/2012/07/11/rails-3-remote-links-and-forms/"/>
    <updated>2012-07-11T11:28:00+08:00</updated>
    <id>http://xguox.github.com/blog/2012/07/11/rails-3-remote-links-and-forms</id>
    <content type="html"><![CDATA[<h2>楼主物语:</h2>

<blockquote><p>这些天遇上一些困难请教Larry的时候他没少给我一些英文的资料,虽然能够阅读,但是始终觉得翻译回中文以后再看也方便些.不过有些地方翻的比较蹩脚呀.</p>

<p>原文:<a href="http://www.alfajango.com/blog/Rails-3-remote-links-and-forms/">Rails 3 Remote Links and Forms: A Definitive Guide</a></p></blockquote>

<!-- more -->


<p>Spoiler Alert:如果你喜欢魔法,请停止阅读这篇文章.因为,让Rails的表单、连接、输入等如此强大的Rails 3 UJS驱动—-Rails.js,当你知道它的工作原理后,你就知道其实它没有多么的神奇.</p>

<h2>Rails.js做什么</h2>

<ol>
<li>它找到远程链接、表单和输入,并通过Ajax覆盖这些的click事件以提交到服务器端.</li>
<li>它触发6种javascript事件来让你绑定一些回调函数用以处理和操纵这个Ajax响应</li>
<li><del>它处理从服务器端得到的Ajax回应</del></li>
</ol>


<h2>Rails.js不做什么</h2>

<p>请注意到上述最后一点是加了删除线的.当启用新的Rails3远程功能时候,这似乎是混乱的最大来源.因为已经根深蒂固的习惯于Rails2的 link_to_remote 与 remote_form_for,我们期待Rails3也同样的会为我们的表单、链接处理Ajax响应.但是Rails3却没有这么做,它把这些都交给你去完成. Rails会做的是帮你把包裹搬上房间,但不会帮你打开包裹.This is by design;为什么你想要侍从帮你使用你的东西呢?同样的,每个元素的数据实际处理方式很大程度上是独一无二的,并且取决于你再各种情况下工作所得的的数据.所以,Rails把这一部分留给你来做决定,而我们则回到了过去.</p>

<h2>HTML5的角色</h2>

<p>你可能已经听说Rails3将使用HTML5.的确是的.但HTML5所扮演的实际角色并没有你想象中的那么重要. 是否还记得Rails.js所做的第一样东西.在它能覆盖所有远程元素的click事件和submit事件前,它需要先找到这些所有的元素. 因此,我们需要一种方法来指定我们的远程元素.在以前,我们可能会添加 class=&ldquo;remote&rdquo; 到我们的远程元素.但现在,所有的class属性都跟样式相关联了.难道就没有一种办法能区分出远程元素而不用污染到我们的CSS类. 这,在HTML5中是有的.有这么一段HTML5规范:现在,你可以添加任意标签到一个HTML元素,只要这个标签的起始部分是"data-&ldquo;.因此,下面这是一个有效的HTML标记:</p>

<p><code>html
&lt;a href="stuff.hml" data-rocketsocks="whateva"]] &gt; Blast off!&lt;/a]] &gt;
</code>
Rails 3充分利用了这种新的HTML标记,它通过在HTML元素中添加 :remote => true 来转换所有的链接和表单使其拥有了标签 data-remote = true
<code>html
&lt;%= link_to "Get remote sauce", {:action =&gt; "sauce"}, :remote =&gt; true, :class =&gt; "button-link" %&gt;# =&gt; &lt;a href="sauce" class="button-link" data-remote=true&gt;Get remote sauce&lt;/a&gt;
</code>
现在Rails.js通过如下的选择器找到所有的远程链接:
<code>javascript
$('form[data-remote]')
$('a[data-remote],input[data-remote]'
</code>
并且分别通过一个ajax请求到form的action和link的href属性从而重载了submit和click动作, Then it does the same thing wirh remote forms and inputs, using the form&rsquo;s action. 就是这样,HTML5只是提供一个方便、语法、方式给我们用以指定及选择劫持哪个元素(???)</p>

<h2>处理Ajax响应</h2>

<p>那么,我们到底是如何根据ajax响应做一些事情呢?幸运的是,当Rails.js远程发送你的请求时,它同时也触发了6个自定义事件,并传输相应的数据/响应到每一个事件.你也可以绑定你自己的处理函数到这些事件. 这6个事件是:</p>

<p><code>
ajax:before
ajax:loading
ajax:success
ajax:failure
ajax:complete
ajax:after
</code></p>

<h2>Update:</h2>

<blockquote><p>在这篇文章写下后,Rails团队对 jQuery UJS driver 做了些改动.在最新版本的Rails.js中,只剩下了以下4个回调事件:</p></blockquote>

<p><code>
ajax:beforeSend
ajax:success
ajax:complete
ajax:error
</code>
这样,在你的页面中,你将会像下面这样绑定这些事件到一个函数中:</p>

<p><code>javascript
$('.button-link').bind('ajax:success', function(){  alert("Success!");
});
</code>
你会发现,通过绑定一些函数到实体/事件,在Rails中的所有的javascript功能都是很方便的.</p>

<p>Binding is good,因为它不是引人注目的.javascript功能和html标记分别作为完全独立单位但通过javascript绑定在一起的存在.如果用户没有用到javascript,那么javascript所绑定到html实体的js函数将永远不会被执行,用户所得到的,只是干干净净、有效的HTML</p>

<h2>把他们都放在一起</h2>

<p>解释的足够多了,下面让我们建立一个加载一些内容到页面的远程表单.我们会提供给用户即时反馈,完整地处理所有的错误,以及能让用户重置表单再做一次.有了以上知识的武装,希望下面的没有人会看起来以为是魔法. 接下来,我们将假定在我们的Rails app中,有一个Comment model,且该model在数据库中有一个text类型的"content"字段.通过提交一个远程表单,我们能让用户创建一个comment,并将这个comment插入到页面中.</p>

<blockquote><p>你可能注意到,我们直接请求了一个html的响应,但却以JSON的形式返回一些错误.我们使用 respond_with 覆盖了许多魔术方法.这一切说明我们在请求/响应中有多大的控制权.</p>

<p>接着的Part2将通过一个更production-appropriate的例子叙述了如何请求一个JS(xml,json,文本或其他)的响应.</p></blockquote>

<h2>View</h2>

<p>```ruby
&lt;%= form_for @comment, :remote => true, :html => { :&lsquo;data-type&rsquo; => &lsquo;html&rsquo;, :id => &lsquo;create_comment_form&rsquo; } do |f| %>  &lt;%= f.text_area(:content) %>
  <div class="validation-error"></div>
  &lt;%= f.submit %>
&lt;% end %></p>

<div id="comments"></div>


<p>```</p>

<h2>Controller</h2>

<p>```ruby
respond_to :html, :xml, :json&hellip;</p>

<p>def create
  @comment = Comment.new( params[:comment] )</p>

<p>  if @comment.save</p>

<pre><code>respond_with do |format|
  format.html do
    if request.xhr?
      render :partial =&gt; "comments/show", :locals =&gt; { :comment =&gt; @comment }, :layout =&gt; false, :status =&gt; :created
    else
      redirect_to @comment
    end
  end
end
</code></pre>

<p>  else</p>

<pre><code>respond_with do |format|
  format.html do
    if request.xhr?
      render :json =&gt; @comment.errors, :status =&gt; :unprocessable_entity
    else
      render :action =&gt; :new, :status =&gt; :unprocessable_entity
    end
  end
end
</code></pre>

<p>  end
end
```
显而易见的,我们需要一个显示comment的partial模板 _show.html.erb .希望你知道如何做到.</p>

<p>在这一点上,我们有一个提交到远程服务器上的表单,并且我们的服务器响应以我们在view中的partial,并准备插入到页面中去.但有一点是,它并不是真正的被插入到页面中.</p>

<h2>Javascript</h2>

<p>是时候绑定一些处理函数到那些触发的ajax事件.因此,在我们的表单页面中,我们将希望加载这个javascript(可能会在标签或者在一个分离开的js文件)</p>

<blockquote><p>Update:</p>

<p>下面这段已经更新以绑定到最新版本的Rails.js所允许的回调.</p></blockquote>

<p>```javascript
$(document).ready(function(){
  $(&lsquo;#create_comment_form&rsquo;)</p>

<pre><code>.bind("ajax:beforeSend", function(evt, xhr, settings){
  var $submitButton = $(this).find('input[name="commit"]');

  // Update the text of the submit button to let the user know stuff is happening.
  // But first, store the original text of the submit button, so it can be restored when the request is finished.
  $submitButton.data( 'origText', $(this).text() );
  $submitButton.text( "Submitting..." );

})
.bind("ajax:success", function(evt, data, status, xhr){
  var $form = $(this);

  // Reset fields and any validation errors, so form can be used again, but leave hidden_field values intact.
  $form.find('textarea,input[type="text"],input[type="file"]').val("");
  $form.find('div.validation-error').empty();

  // Insert response partial into page below the form.
  $('#comments').append(xhr.responseText);

})
.bind('ajax:complete', function(evt, xhr, status){
  var $submitButton = $(this).find('input[name="commit"]');

  // Restore the original submit button text
  $submitButton.text( $(this).data('origText') );
})
.bind("ajax:error", function(evt, xhr, status, error){
  var $form = $(this),
      errors,
      errorText;

  try {
    // Populate errorText with the comment errors
    errors = $.parseJSON(xhr.responseText);
  } catch(err) {
    // If the responseText is not valid JSON (like if a 500 exception was thrown), populate errors with a generic error message.
    errors = {message: "Please reload the page and try again"};
  }

  // Build an unordered list from the list of errors
  errorText = "There were errors with the submission: \n&lt;ul&gt;";

  for ( error in errors ) {
    errorText += "&lt;li&gt;" + error + ': ' + errors[error] + "&lt;/li&gt; ";
  }

  errorText += "&lt;/ul&gt;";

  // Insert error list into form
  $form.find('div.validation-error').html(errorText);
});
</code></pre>

<p>});
```</p>

<blockquote><p>这些函数每一个都能轻易地抽象化,这样他们能轻易地或者自动地应用在我们所有的远程表单中.</p></blockquote>

<p>这些绑定也以同样的方式工作于远程链接中.但我想我们已经使用了一个远程表单在这个例子中,由于这需要一些额外的但没有明显区别的步骤(例如清除表单或增添验证错误)</p>

<p>同时,需要注意到:从ajax事件所传输到你的函数的数据并不是在同一个顺序.在ajax:success中是 evt,data,status,xhr ,而在ajax:failure中是,eve,xhr,status,error.This will get ya every time.</p>

<h2>别急,还有更重要的</h2>

<p>如果你从文章开始就做足功课,并且看过了Rails.js文件,你应该会注意到一些额外的细节.</p>

<h2>.live</h2>

<p>Rails.js实际上用 .live() 而不是直接绑定click事件到远程表单、链接、输入.这样,在上面的javascript中,你可以替换 .bind() 为 .live() 显得更文艺一些.</p>

<h2>Update:</h2>

<blockquote><p>如果要在你的ajax处理中使用 .live() ,请确定你所使用的jQuery版本>v1.4.4,因为早些的版本会在IE中出现一些问题.</p></blockquote>

<h2>:confirm => &ldquo;R U sure? &rdquo;</h2>

<p>你可能还会注意到 Rails.js文件处理 :confirm => &ldquo;R U sure? &rdquo;(当你点击或者提交一些东西的时候嘣的弹出一个小窗口并显示"R U sure"(你也可以只写 :confirm => true 使用默认的信息)),就像远程功能,Rails 3简单地添加有效的标签 data-confirm=true 到你的HTML元素</p>

<h2>:disable_with => &ldquo;Submitting…&rdquo;</h2>

<p>Rails 3给了我们另外的一个选项,:disable_with,这样当一个远程表单被提交的时候, we can give to form input elements to disable and re-label them.添加data-disable-with标签到这些输入中,使Rails.js能选择和绑定这个功能.</p>

<p>想知道如何让远程表单或者链接工作于 js.erb(或者其他任何与之相关联的形式),请看这篇文章的<a href="http://xguox.me/blog/2012/07/12/Rails-3-remote-links-and-forms-part-2-data-type-with-jquery/">Part 2</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails小记两则]]></title>
    <link href="http://xguox.github.com/blog/2012/05/27/rails-note/"/>
    <updated>2012-05-27T11:15:00+08:00</updated>
    <id>http://xguox.github.com/blog/2012/05/27/rails-note</id>
    <content type="html"><![CDATA[<p>最近在做个课程设计,好吧,俺老师是要求用JSP的,可惜我那弱爆了的水平是不可能完成的.于是顶着各种压力自己用Rails来做.</p>

<p>今天才发现个问题,原来mysql默认存储的int貌似最多是10位就爆了,原本我的数据库中有学号那个字段的并且migration是存为integer,结果录入数据时候就各种甭了,因为学校学号都是10位数,不管我输入的是什么,进了数据库的学号字段都变成 2147483648, 刚开始看日志,看程序都木有发现什么问题,纠结不能,查看数据库发现,每条记录的学号西端都是统一的,搜索一通才发现问题所在.于是直接用mysql工具将学号字段改成了BIGINT,杠杠的就啥事都没了</p>

<!-- more -->


<p>另外个是,用了will_paginate这个gem做分页,不过默认显示的是"previous"和"next",改为中文的"前一页"和"后一页"需要先在config/initializers/ 下新建一个will_paginate.rb,  and then在里头加入
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>coding: utf-8&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>WillPaginate::ViewHelpers.pagination_options[:previous_label ] =  &ldquo;前一页&rdquo;
</span><span class='line'>WillPaginate::ViewHelpers.pagination_options[:next_label ] =  &ldquo;后一页&rdquo;</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
