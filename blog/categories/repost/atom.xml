<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Repost | XguoX]]></title>
  <link href="http://xguox.github.com/blog/categories/repost/atom.xml" rel="self"/>
  <link href="http://xguox.github.com/"/>
  <updated>2014-03-16T20:59:43+08:00</updated>
  <id>http://xguox.github.com/</id>
  <author>
    <name><![CDATA[XguoX]]></name>
    <email><![CDATA[golvinlu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Repost]关于D一族的真相以及历史文本的分析]]></title>
    <link href="http://xguox.github.com/blog/2013/05/12/record-of-the-void-century-and-d/"/>
    <updated>2013-05-12T14:16:00+08:00</updated>
    <id>http://xguox.github.com/blog/2013/05/12/record-of-the-void-century-and-d</id>
    <content type="html"><![CDATA[<h2>关于D一族的真相:</h2>

<p>路飞等人,一出场就有了与众不同的名字,即在名字当中比所有的普通人都多了一个D字,而海贼里不像现实中的美国等国,有MiddleName这个属性,事实上除了D一族的人以外,漫画中还没有出现过三个名字的人物.这真的是D一族自古流传下来的特殊起名方式吗?</p>

<p>我的观点是,是流传下来的,但这个起名方式却是从800年前刚刚突然开始流传的.因为罗宾在读到海底森林的历史文本时,最后的署名是"乔伊波伊",这个人物很明显与D一族息息相关但却没有D(该人物具体分析见后文).</p>

<p><img src="https://uvqrqa.dm1.livefilestore.com/y2pfqTNQa7HcK__HqPl6n8RqzkF080dUaO13KHRGdeduPCn-y7geS-x6xcW98_F9QgJFV5HI9qMPiUUef_-3gpCxx8GRC1mKy-BgjZdoUiLP48/838ba61ea8d3fd1f45f53966314e251f94ca5fe9.jpg?psid=1" alt="" /></p>

<!-- more -->


<p>在漫画中,一个名字,两个名字的人物都数不胜数,而三个名字的人物只有D一族而已.我想D很可能是因为国家遭难后,被迫背井离乡的人们为了不忘记国家而特地加进名字当中的,而D很可能就是以前王国名字的缩写.这样一来乔伊波伊在历史文本的署名里没有D就很好理解了,因为800年前,他们的名字没有加入D,所以乔伊波伊留书给友人时不会平白加个D进去.</p>

<p>这里容许我先把D的真相先放一放,分析一下古代兵器 <br/>
古代兵器一共有3个,分别是冥王Pluton,海王Poseidon,以及天王Uranus.<br/>
其中的普鲁托和波塞冬的真相已经揭露,分别是一炮能轰掉一座岛的战船和能控制海王类的人鱼公主.天王乌拉努斯是什么呢?因为有了人鱼公主是波塞冬的先例,所以天王已经不局限于"兵器"的范畴里了,而且已经有了威力惊人的普鲁托,再有类似战斗力的兵器也有些多余,即便天王是所谓能在天空飞的船,用处似乎也不大(能源问题也无法解决),所以我认为天王不是真正意义上的兵器.<br/>
三个古代兵器都是D国的最高机密,但前两者都并非出自D国,如果三者都来自外界的话,D国似乎没什么理由成为独占这三个兵器秘密的国家.所以天王乌拉努斯应该来自D国,并且是人类.</p>

<p>推理到了这里,就回头来看一下D国的名字吧.波塞冬这个海王之名既然来自人鱼中的尼普顿(海神)一族,那D一族自然就是天神一族了.如此一来我脑海中就浮现了一个D开头的天神的词汇Deus迪乌斯.如果是这个词,我觉得一切都能串联起来了,在奥哈拉的时候,尾田特意安排不让教授说出该国的国名,就是知道提前泄露了这个国名的话,那D的神秘就被揭开了大半吧.</p>

<p><img src="https://gagqnq.dm1.livefilestore.com/y2p30ujb7bNrRXuFeG7IQpRLehjTwGrg8_sQOph6h1rbsnLp9LEnoZ-WjJZiTziIiAlKSsMXxZ_wLc_dl3490Z2GIvJyzUm2iwZL1BTpOIeC2k/e5f5bc3eb13533fa874a0872a9d3fd1f40345b9f.jpg?psid=1" alt="" /></p>

<h2>天王Uranus的真面目</h2>

<p>我觉得该"兵器"势必要有与"天"有关惊人的能力,并且该能力必须跟人鱼公主那样,是某个独有的能力.而漫画至今为止,满足这些条件的能力只有一个了,可能有不少读者知道我在说什么了,没错,指的就是目前只显示了冰山一角的,海贼王罗杰的"聆听万物之声"的能力.所以,我的结论就是,古代兵器天王乌拉努斯,以前是海贼王罗杰,而现在指的则是路飞.</p>

<p><img src="https://gagqnq.dm1.livefilestore.com/y2p5r9RVEDBkkC0Y9ym_wuy0OTM2RKLpUExNVT682E8JJDxfE4s7cdMWOyeRV0wLzmrGpBcyLO1UdyXg7-vvlqw9XEZiO7x6Gnu2sUvFqxiM4c/edf2a9ec8a136327e285586f908fa0ec08fac734.jpg?psid=1" alt="" /></p>

<p>有了这个结论之后,有很多东西都更为明朗了,比如我查阅之后发现,Uranus的含义不仅代表天空,还象征了希望与未来,这不正是路飞的特质么.</p>

<p><img src="https://tupdbg.dm1.livefilestore.com/y2p37k-nIzvb3mtO8Z1-_EVJCD1xtW8XyDozEOuxeai8BeXCpkHHTmG_mZHoPK3epkhEsDtAycuSGy9_2iTn557h6VmlqDIFv3KwsaHKQkOcAc/f2d91bd5ad6eddc47de02ea738dbb6fd52663310.jpg?psid=1" alt="" /></p>

<p>而在顶上战争中战国元帅的异常反应,以及之前表现出的对D的异常警觉,我觉得也得到解释了.要知道,在新世界里霸气不说烂大街,但也不是稀有到极点吧,多弗拉明戈啥的都有霸气了,而G5小兵们的反应,也没有像他这样夸张.那为什么见多识广的战国会对个霸气,对个D族海贼如此惊讶呢?我想是因为他还知道一个事实,那就是,D一族的人如果拥有霸气,就有成为天王乌拉努斯的可能(就像海王波塞冬的能力局限于王族的人鱼).</p>

<p><img src="https://uvqkyq.dm1.livefilestore.com/y2p15mcfbDi0AFQMVedyw_k7fOfLCfrPX_h7tV43Re8ksYUEaFQc64bc3bFhl8-JTwyhgCDjpnbdw0v8twmvKM_rGFlA0_G4qOfpHNXbZIRs48/c8b6033b5bb5c9eab80698bfd439b6003bf3b3a7.jpg?psid=1" alt="" /></p>

<p><img src="https://uv8asw.dm1.livefilestore.com/y2pNpqBNJsn1eWkN8RVxH4Z0a87gH8M3t2o8bpQm5yVyCbdiyFOEGKRozsi2-FQzHXGjvQarc4OeXy3PKLJooDmEzPeM3JtzyUEVW6zDfq209U/e7f8ad6eddc451daacf196b7b7fd5266d0163210.jpg?psid=1" alt="" /></p>

<p>这也符合了战国对艾斯说的这一番话,这个资质,即不是指是个高手就有的霸王色霸气,更不是说能把武装色见闻色练到多强,指的其实是"聆听万物之声"这个能力.这里战国说的"海贼王",指的就是"天王",他不挑选四皇的任何一人(至少红发有霸气),而偏偏说艾斯会成为"海贼王",不是说艾斯的能力或战斗潜力,而是因为他是D族,惧怕他成为"天王".</p>

<p>就像在20年前,罗杰被冠上了"海贼王"的名号,就实力来说,也并没有说过罗杰就比金狮子,白胡子等人强了.只是去过拉夫德鲁就被封海贼王,是否有点不妥呢.我认为,这其实是知道真相的ZF高层赋予的名号,五老星清楚的知道,罗杰是古代兵器天王乌拉努斯,也惧怕他的意志,他的能力,于是把跟ZF敌对的"天王"冠上了"海贼王"的头衔,让普通民众去憎恨这样一个存在.</p>

<p><img src="https://tureeg.dm1.livefilestore.com/y2p7O7HYWQqHDu0JsNMBIjyeUEDlmwde9p7u8AnoAQAcE0lQOhAVNAYcnIP9mXllv9tI1NiZJAShA38sKTR3qt7Za7QY5J0o8_2NGcfcZqxKhY/ff165bb5c9ea15ce981b7b55b7003af33b87b2a7.jpg?psid=1" alt="" /></p>

<p>这种表达与真意有差别的说话方式,也是尾田这个老狐狸一直玩的把戏了.听起来就像是说艾斯实力会变强到成为海贼王啥的,知道内情的人才知道这是指天王的能力会觉醒.同时我也了解了为什么尾田一定要安排艾斯在这里死去,安排路飞非要在2年后才觉醒了这种能力.因为就像波塞冬一样,天王乌拉努斯在一个时代只会出现一人,这样一来,与路飞同样是D一族,性格相同,做法类似,同样意志的艾斯,很可能会先于路飞一步觉醒该能力,故事就变成艾斯传了.</p>

<p><img src="https://7nmmeq.dm1.livefilestore.com/y2pofDYf8635GNVnad1kvfQqCWcM7T9LoY0fwkxBmHi0rddBVhCZU1IgbLcs_Tfb9tru89yb-SBjc7D9hvO9beFWwFHqOz7Z46gkQoTF5DyzgM/21e951da81cb39db99c7fd0ad1160924ab183010.jpg?psid=1" alt="" /></p>

<p><img src="https://uv8hkg.dm1.livefilestore.com/y2pPA59Q5_rujOviWT4zGnOIHgkaQbxleenJ6iSOyORoCQHoZF5PFzFEyrgQJC_3b-jDtGilZBiPO8Lf8IHInnhU03V6FGx17nHEK6y9SpGlAs/adf781cb39dbb6fd625c7f7a0824ab18972b3710.jpg?psid=1" alt="" /></p>

<p>同样的,知道真相的白胡子在临死前说罗杰等的不是蒂奇,这也许是因为只是D族,只有霸气还不够吧,还需要继承D的意志,三个齐全了才能觉醒.</p>

<h2>一窥天王乌拉努斯能力的一角</h2>

<p><img src="https://gagqnq.dm1.livefilestore.com/y2pb4WHFN8IFVdQunF8Pa7k0LihzpIEp-k6sB-NEsL1WfQVXN_CaTWzmQ0giUEV-jUxOI29b8F5cD059paTGmrWpTnd_DUQlvIfY1HHvhcgW_Q/763e632762d0f703131d0f8009fa513d2797c5e9.jpg?psid=1" alt="" /></p>

<p>综合雷利的说法,他们不认识历史文本的文字,但在空岛上,罗杰切切实实的说将文字(而非石头本身)带去了目的地,并且在边上的黄金上留下也是这种文字!</p>

<p><img src="https://uv9q1g.dm1.livefilestore.com/y2pZhTd6h45qNcQCx5qEUXq-eigqS7TN45du1Gd7hkmgRttzwMtYqLGtddS-8oLIIs0mW7pvHxZLFZgDA_aPqZFL0RG9hJXm2Z3j9QQAnUZwfw/c52c213fb80e7bec812998bd2e2eb9389a506bad.jpg?psid=1" alt="" /></p>

<p><img src="https://uv9qna.dm1.livefilestore.com/y2ptCrdmtJMdUgzV_F96rOt-gPnE3dtZPF8IhQvijDMH1T971W5ZYu0SODxxIY5tvi7U5X70TW70WYsO4-ShTNGs74PbR084H3siIuVFXxKYGA/8fdd82025aafa40f0d885481aa64034f79f019c9.jpg?psid=1" alt="" /></p>

<p>再结合漫画中明确透露的该能力能听懂海王类的对话(无法像波塞冬对其进行召唤与命令).我想,这个"聆听万物之声"的能力应该没有任何夸张,确实它能听到"万物"的声音,万物包括记录历史文本的石头.</p>

<p><img src="https://7nncyg.dm1.livefilestore.com/y2p1NgYDTVDAFfNw8XQEJfp1ocjLwTSES8qzGnEnHz2SG0c09KSxkSkBFMrRXNY6yFM78A9qnuJG6Xlucrm92CUnkWLWCDeWMFX-Bsem-EoKpY/44237bec54e736d1f85a17549a504fc2d46269cb.jpg?psid=1" alt="" /></p>

<p>这样一来,这块无法破坏的石头为什么能刻上文字也能说得通了,即便D国有在石头上刻字的技术手段,也应该不会让工匠来操作.更何况海王,冥王这种情报,我觉得应该是除了"王"以外不该泄露给任何人的信息.这样,能在石头上写上字的人乔伊波伊自然就是原初的"天王",那该如何写字呢,石头无法破坏,罗杰更是不认识这种字.这里只能运用"听"的能力了,我认为,该能力能与万物进行"交谈与控制",而石头黄金等物体会"听从"天王的命令,浮现他想记录的信息,也就是说,文本上的文字可以说是"石文字",而罗杰那时就是靠这个能力,从石头那里"听到"了记录的内容,并"命令"旁边的黄金记录下该任务"已完成"的信息.</p>

<p><img src="https://gagqnq.dm1.livefilestore.com/y2pomnNI6dgcTcMvJ-uGVNkkmhPRnMLlnd9jhBQ0MBNh0mv1HGaPzyUud-97MO1N8W7r3MBaBa7rqitc3pGJZaGfKImXJbxVCC5JvwzWbdwF5A/b7d6fbedab64034f3283585aaec379310b551dc9.jpg?psid=1" alt="" /></p>

<p>能与石头进行对话的能力,从鱼人岛的谢罪文中也能一窥究竟.尼普顿很清楚的说了,这据说是写给人鱼公主的,但详细内容没流传下来,所以尼普顿不认识这些文字,国王都不认识了,很明显以前的王族都不会认识.但如果要写信的话,用大家都明白的文字写是常识吧.但偏偏石头上的还是这种鸟文,我想这也从侧面证明了石头上写字的人无法控制显示的字体,即无法人为的在这些石头上刻字.</p>

<h2>二十国攻打天神国的缘由及导火索</h2>

<p>在800年前,D国就拥有了三个古代兵器的助力,又有"天神"的国名,很可能属于君临天下的国度.应该是世界各国的领导者.可惜的是,这个国家的施政方针让一些国家的贵族,王族产生了不满.</p>

<p><img src="https://7npb7q.dm1.livefilestore.com/y2pug1GsjZunfwEXlFl2OLfdHfdFf6jokVuN2Pok_7MduOKj_0iv7SegR6Se4aSoeVENL8YjeePGGFawTavxUY_tftuu8cMr31i6zQPZGKPMtE/6202070828381f3086bb17f5a8014c086f06f0fe.jpg?psid=1" alt="" /></p>

<p><img src="https://gagqnq.dm1.livefilestore.com/y2pJGG2u-UJI7M2C_2w5grJoJpaLuNEPKJzraSbDYkIV6ZITmmG3CAHH1E5wWH0h6WXIZ_hhNi8NF4gKiHd90E8PIl5s6YDIR71J8j57O40ua0/fb2528381f30e924c806066d4d086e061c95f7fe.jpg?psid=1" alt="" /></p>

<p>就漫画中揭露的几个王族来看,可以清晰的看到两个极端,一种是像沙之岛和鱼人岛那样,王族与民众都相濡以沫,没有隔阂.一种就像天龙人,哥亚王国那样,尊卑分明,下等阶级被当做垃圾,当做奴隶.虽然各国有各国的做法,也算互不相干,但天神国作为世界各国的领导者如果这么做的话,问题就严重了,恰巧D国托付历史文本的两个国度都是没有明确的尊卑之分的国度,可以想象D国的王族也是类似这两个国家的.</p>

<p>一直以来,都是号称"君权神授",君王总是以"天子"的姿态,让民众敬仰,崇拜,服从.但若是各国领导者的"天神"一族的天王要与民众们平起平坐的话,那阶级思想根深蒂固的国王们以后该如何服众?为了保住自己的地位,&ldquo;王"决定要挑战"神&rdquo;,于是20国的联合军出发将神一网打尽了.</p>

<p>而"神"虽然有冥王,有波塞冬相助,但如果他们以暴制暴,那就与初衷完全相悖了.于是他们选择了隐忍,将一众族人分送去世界各地,并留下了历史文本,希望D国逃难出去的人们能出现D意志的继承者,并能找到更好的方法来打破贵族与平民之间的鸿沟吧.与其说这是20国与D国的对抗,不如说是这个世界古旧的制度与新的思维之间的对抗,这就是一切的源头.</p>

<h2>导火索</h2>

<p>我认为就是将鱼人岛移去地上的这个决定.</p>

<p><img src="https://uvpnza.dm1.livefilestore.com/y2pvW7f8IKTfYROnqtR2bxZA3NFg64Btq_1Dt7ST_gCvH2nEPrZVlS3jeUCOt8SxvOtSlk_Qs8sthxTtSVIj1zPx0k7xJS2FBFvlJuyWg-N_W0/6310f8dcd100baa1d7c7dce74610b912c9fc2eb4.jpg?psid=1" alt="" /></p>

<p>罗宾在一开始就说了,鱼人岛的历史文本,是至关重要的.但如果仅仅是写给人鱼公主的私人信件的话,再怎么也重要不到哪里去.但是将各个线索串联起来看一下的话呢?</p>

<p><img src="https://7nolba.dm1.livefilestore.com/y2pPLCWFaY4K4stKt0-A09iSiTz7Uf1o4jgkSP6oDRYOUkfl3PdEvbZMoUsb_UXNaSZ664B1yuD0rWNd_u6DuRlsfVKMTdNimshGFSsz55BPq0/26994aed2e738bd4d5f7286da08b87d6267ff942.jpg?psid=1" alt="" /></p>

<p>奴隶制度,人鱼和鱼人被认为是鱼.在鱼人岛的偏偏是谢罪文,为何要谢罪,是因为无法完成约定.那也就是说,之前D国的乔伊波伊已经与尼普顿一族约定了要把鱼人岛移去地面上.但有波塞冬的力量,移动诺亚搬去海面不是轻而易举吗?为什么会做不到呢?</p>

<p>这里我能想到的就是世界会议了,在过去的世界会议上,身为盟主的天神国决定帮助鱼人岛移去地上,在当年的世界会议上提出了该提案,遭到了对鱼人深度种族歧视的国王们的反对和憎恨,并导致了接下来的灭国.于是才有了这封谢罪文.而这个约定,也致使对D国积累了诸多不满的20个国家的国王终于下定决心要灭掉这个危险的存在.</p>

<p>现在就期待着路飞,这个新时代的象征希望与未来的天王乌拉努斯,能亲自一个一个国家的进行调和,将D国的意志真正的融入到每个民众心中,一环一环的打破古老的枷锁,让世界的风向朝向自己.这样,一定能够打开崭新的局面吧.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Repost]与父亲在一起的日子 (组图)]]></title>
    <link href="http://xguox.github.com/blog/2013/05/11/repost-days-with-my-father/"/>
    <updated>2013-05-11T13:52:00+08:00</updated>
    <id>http://xguox.github.com/blog/2013/05/11/repost-days-with-my-father</id>
    <content type="html"><![CDATA[<p>昨天是父亲节.</p>

<p>半夜里,我突然想起来,曾经推荐过一个美国摄影师的作品.母亲去世后,他就拍他的父亲,还写下自己的感想.</p>

<p>这组作品,我看过多次,昨天再看,竟然又一次被感动了.儿子对父亲的关心、对老年人衰老和孤独的感慨,都在其中得到了细腻的体现,非常感人.</p>

<p>网上似乎还没有全文翻译,我就把它译了出来,再一次推荐给大家.</p>

<!-- more -->


<p>=============================================================</p>

<p>与父亲在一起的日子<br/>
作者:Phillip Toledano<br/>
译者:<a href="http://www.ruanyifeng.com/blog/2011/06/days_with_my_father.html">阮一峰</a> <br/>
原文网址:<a href="http://www.dayswithmyfather.com">http://www.dayswithmyfather.com</a></p>

<p>1
<img src="http://image.beekka.com/blog/201106/bg2011062001.jpg" alt="" />  <br/>
这是一份日记,记录我的父亲.</p>

<p>2
<img src="http://image.beekka.com/blog/201106/bg2011062002.jpg" alt="" />  <br/>
我希望留下我和他在一起的日子.</p>

<p>3
<img src="http://image.beekka.com/blog/201106/bg2011062003.jpg" alt="" />  <br/>
2006年9月4日,母亲突然过世,将照顾父亲的重担一下子留给了我.父亲患有健忘症,经常不记得几分钟前发生的事.<br/>
我带着父亲参加了母亲的葬礼.但是回家后,每隔15分钟,父亲就问我母亲去了哪里.我不得不一遍遍地解释,她死了.父亲震惊极了,问我为什么没人告诉他?为什么不让他参加葬礼?为什么他从没去医院探望她?&hellip;&hellip;他全忘了.<br/>
于是,我改口说,母亲去巴黎照顾生病的舅舅了,暂时不回来.</p>

<p>4
<img src="http://image.beekka.com/blog/201106/bg2011062004.jpg" alt="" /><br/>
年轻时,父亲非常英俊,在好莱坞当电影演员.他不喜欢自己现在苍老的样子.<br/>
我让他看着镜子,想拍一张肖像.他看到镜中的自己,顿时变得非常不安.<br/>
你看,即使到了98岁,他还是有虚荣心.</p>

<p>5
<img src="http://image.beekka.com/blog/201106/bg2011062005.jpg" alt="" /><br/>
屋子里到处都是他留下的小纸条,上面写着"人都到哪里去了?&ldquo;、"发生什么事了?&rdquo;&hellip;&hellip;这显示了他内心深处的恐慌,他从不对我说这些.</p>

<p>6
<img src="http://image.beekka.com/blog/201106/bg2011062006.jpg" alt="" /><br/>
父亲握着我的妻子卡拉的手.<br/>
每当卡拉画眉毛或者穿新裙子,他都会注意到,他对细节很敏感.另一方面,他还赞美卡拉"身材好",喜欢看卡拉穿短裙,我觉得很有意思.</p>

<p>7
<img src="http://image.beekka.com/blog/201106/bg2011062007.jpg" alt="" /><br/>
这是拉尔夫叔叔的照片.他是父亲的弟弟,去年死了,父亲还不知道.</p>

<p>8
<img src="http://image.beekka.com/blog/201106/bg2011062008.jpg" alt="" /><br/>
父亲经常对我说,他想死.他说是时候走了,他已经活得太长了.<br/>
很奇怪,我竟然有些赞同他的想法.他现在如此健忘,这样的生活根本不能叫做生活,而是一种折磨.但是,这个世界上,我的直系亲属只剩下他一个人了.</p>

<p>9
<img src="http://image.beekka.com/blog/201106/bg2011062009.jpg" alt="" /><br/>
这是我家的狗乔治.父亲不记得她的名字,就叫她"狗狗".<br/>
晚餐时,父亲喜欢把菜扔到地上喂她(这总会吓到母亲).当乔治朝着地上的菜窜过来,父亲就会很高兴,夸她可以去拍电影.</p>

<p>10
<img src="http://image.beekka.com/blog/201106/bg2011062010.jpg" alt="" /><br/>
每天,父亲待在厕所的时间很长很长.因为他健忘,所以他可以在那里待上几个小时.<br/>
他常常在厕所里刚系上裤子,就说"等一等,我要去上厕所".这让人又恼火又伤心.我对他说,你已经在厕所里一个小时了,他就会用一付难以置信的表情看着我.</p>

<p>11
<img src="http://image.beekka.com/blog/201106/bg2011062011.jpg" alt="" />
我喜欢他看报纸的那些时刻.<br/>
有那么几分钟,他很清醒,一切看上去又回到以前.那时,我们就不再称母亲去了巴黎,而是说她去买吃的了,一会就回来.那是一天中的甜蜜时刻.</p>

<p>12
<img src="http://image.beekka.com/blog/201106/bg2011062012.jpg" alt="" /><br/>
吃饭总是一个大问题.我现在明白,为什么母亲去世之前,总是烧一模一样的菜,因为父亲只吃那个.<br/>
一般情况下,他只吃鸡蛋,炒鸡蛋、鸡蛋色拉、鸡蛋汤等等.奇怪的是,他的胆固醇一点也不高.</p>

<p>13
<img src="http://image.beekka.com/blog/201106/bg2011062013.jpg" alt="" /><br/>
父亲是一个幽默的人.我把两块饼干放在他的胸口,他说"快来看我的奶头".这难道不好笑吗?</p>

<p>14
<img src="http://image.beekka.com/blog/201106/bg2011062014.jpg" alt="" /><br/>
父亲退休后,依然保持对艺术的热爱.他用大量的时间听歌剧、画画、雕塑.<br/>
虽然现在他不再画画了,但是依然向往艺术.他对日落很着迷,说这些色彩可以画出很多画.虽然身体不行了,他的心还是年轻的.</p>

<p>15
<img src="http://image.beekka.com/blog/201106/bg2011062015.jpg" alt="" /><br/>
父亲是讲故事的高手.从小我就喜欢听他的故事,他的表演可是奥斯卡级别的.<br/>
如果他心情不好,我就请他讲一个故事,他会很快进入角色,把自己忘了.</p>

<p>16
<img src="http://image.beekka.com/blog/201106/bg2011062016.jpg" alt="" /><br/>
今天,他过98岁生日.</p>

<p>17
<img src="http://image.beekka.com/blog/201106/bg2011062017.jpg" alt="" /><br/>
我让他拍一张我的照片.我想知道,他能看出我有多爱他吗.<br/>
我手上的戒指,是母亲去世那天戴的.</p>

<p>18
<img src="http://image.beekka.com/blog/201106/bg2011062018.jpg" alt="" /><br/>
今天是母亲的生日.我总是记不住这个日子,但是今天早上我梦到了她.她在笑.<br/>
要是她还活着,今天就是81岁了.<br/>
妈,生日快乐.</p>

<p>19
<img src="http://image.beekka.com/blog/201106/bg2011062019.jpg" alt="" />
父亲很在意别人给予他的关心.<br/>
每次我去看他,他都把这当做一件大事,总是说他有多爱我.在他眼里,我是一个天才,而卡拉也是我们家当然的一份子.<br/>
我真高兴,这段时间我们在一起.</p>

<p>20
<img src="http://image.beekka.com/blog/201106/bg2011062020.jpg" alt="" /><br/>
我总是被父亲爱母亲的程度震惊.他一直在谈她,对她充满感激,无比珍惜这段感情.<br/>
母亲很爱我,就像胶水一样,把我们这个家紧紧粘在一起.从小她就事事管着我,我有点嫌她啰嗦.有一次,她甚至打电话让我不要出门,因为外面风大危险.<br/>
现在她不在了,我才意识到,我一生都在抵制她对我施加影响.如今它不在了,我却想念了.她应该很高兴听到我这样说.</p>

<p>21
<img src="http://image.beekka.com/blog/201106/bg2011062021.jpg" alt="" /><br/>
父亲很注意健康.早在粗粮流行之前,他就开始吃了.每天早上,他都非常投入地做健身操,弯腰用手指触碰脚趾,还做仰卧起坐.<br/>
他还喜欢往橙汁里加生鸡蛋.他总是问我要不要一起喝,我说这种饮料很恶心,他就得意地哈哈大笑.</p>

<p>22
<img src="http://image.beekka.com/blog/201106/bg2011062022.jpg" alt="" /><br/>
最让父亲开心的,就是我取得成功.<br/>
每当他心情不佳的时候,我就立刻讲一个我职业上的最新突破.我告诉他,我正在为某本著名杂志或者某个大型项目,拍摄重要的作品.有时候,这是真话,有时候,这是假话.但是这不重要,重要的是我要尽可能让他开心.<br/>
他一听到我的这些话,脸上就会露出幸福的表情.他总说:&ldquo;我必须让所有朋友都知道,我有一个著名的儿子.&rdquo;</p>

<p>23
<img src="http://image.beekka.com/blog/201106/bg2011062023.jpg" alt="" />
有一天,我把父亲以前的电影借回家.那是一部30年代拍摄的《陈查理探案记》,我和他一起看.<br/>
他告诉我,那时太年轻,电影里的小胡子都是胶水粘上去的.看着父亲年轻时的形象,我感觉很奇妙.那时他完全不知道,未来会有母亲和我,我们会生活在一起,生活充满了各种可能.</p>

<p>24
<img src="http://image.beekka.com/blog/201106/bg2011062024.jpg" alt="" /><br/>
父亲又问母亲去哪里了,我还是说在巴黎.<br/>
他又问她现在干什么(除了照顾生病的舅舅),我就说她正在管理一个杂技团,然后做出把头放在狮子嘴里、荡秋千、跳火圈的动作.这让我们两个都笑起来了.</p>

<p>25
<img src="http://image.beekka.com/blog/201106/bg2011062025.jpg" alt="" />
有一次,我们说着说着,他就停下来了,什么话也不说,发出叹息,然后闭上眼睛.<br/>
就是从那时起,我明白他其实都知道,关于母亲,关于所有的事情.</p>

<p>26
<img src="http://image.beekka.com/blog/201106/bg2011062026.jpg" alt="" /><br/>
昨天,父亲去世了.<br/>
我整晚都和他在一起,握着他的手,听着他的呼吸声,想知道哪一口气是他最后的呼吸.他死在家中自己的床上,我和卡拉在他的身旁.<br/>
过去三年来,我一直害怕,他会在我不在家的时候去世.我不想让他孤单经历这一切,不想让他周围有陌生人.我知道,这样说可能不合适,但是我非常满意这件事发生的方式.<br/>
很幸运,过去三年我与他在一起,我们没有话没说,知道彼此深爱对方,知道他深深为我骄傲,而我也发现他竟是如此有趣.这是我的一份非常非常宝贵的礼物.</p>

<p>27
<img src="http://image.beekka.com/blog/201106/bg2011062027.jpg" alt="" />
感谢每一位读完这份日记的人,我从没想过其他人会对这件事有兴趣.我深感荣幸我有这么多读者,我读过你们的每一条留言、每一封电子邮件.<br/>
父亲如果知道我这样做,他会很开心.他希望别人知道他的故事.他的生命从无静止,他就像一条河流,一直在奔腾向前.  <br/>
上周是他99岁生日,我问他知道自己几岁吗?他笑着说:&ldquo;22岁?&rdquo;
现在,他去巴黎了,与母亲团聚了.</p>

<p>(完)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Repost]旅行,写作,编程]]></title>
    <link href="http://xguox.github.com/blog/2013/04/13/traveling-writing-programming/"/>
    <updated>2013-04-13T21:53:00+08:00</updated>
    <id>http://xguox.github.com/blog/2013/04/13/traveling-writing-programming</id>
    <content type="html"><![CDATA[<p>概括起来,今年到目前为止,我所做的事情包括:</p>

<blockquote><ul>
<li>花了10个月的时间做世界环游,途经非洲,东南亚,澳洲,中南美洲里的17个国家和地区.这次旅行的主题就是冲浪和摄影.</li>
<li>出席在香港,日本,美国和伦敦举行的会议</li>
<li>启程时给O'Reilly出版公司写了一本书,书名叫做<a href="http://bit.ly/uFbFJR">《JavaScript Web Applications》</a></li>
<li>另外写了一本关于<a href="http://arcturo.github.com/library/coffeescript/">CoffeeScript</a>的书,很快就会由O'Reilly公司出版.</li>
<li>写了大量的开源库,例如<a href="http://spinejs.com/">Spine</a>, <a href="https://spinejs.com/mobile">Spine.Mobile</a>, <a href="http://maccman.github.com/gfx">GFX</a>, 和 <a href="http://github.com/maccman/juggernaut">Juggernaut</a>.</li>
<li>筹划了一个创业公司的框架</li>
<li>出席伦敦2011<a href="http://futureofwebapps.com/london-2011/">FOWA</a>会议</li>
<li>最后,我在Twitter公司找到了一份工作</li>
</ul>
</blockquote>

<!-- more -->


<p>那么,让我从一年前开始,那是2010年9月,我刚好从一个我合作创办的公司里出来,尽管这段经历是很有价值的,但无休无止的长时间苦干让我精疲力尽.我回到了英格兰,需要对未来做一些思考.我一直有一个梦想——移居美国(几年就好),所以,我在Google记事本上写了下面的话:</p>

<blockquote><p>人生的选择:
  去纽约哥伦比亚大学深造</p>

<pre><code>坏处 - 非常昂贵,并不一定能学到什么真正有用的东西,无聊?
好处 - 那是一个纽约的大学!
</code></pre>

<p>  写一本书,申请 01 签证</p>

<pre><code>坏处 - 需要大量的时间,有风险
好处 - 对事业有好处,有趣
</code></pre>

<p>  等待.去纽约度一次假(3个月).等待创业签证.</p>

<pre><code>很容易 - 不是那么有趣
</code></pre>

<p>也许选第二个,不行就选3?</p></blockquote>

<p>最终我选择了2,我已经对JavaScript web应用研究了很久,我要写一本这方面的书,为什么不边做环游世界的旅行、边写书呢?这也是我一个梦想呀.我从oneworld买了一份环游世界的机票(比你们想象的要便宜),决定下周去我的第一站,南非.</p>

<p><img src="https://lh5.googleusercontent.com/-H3VYHMYwDMk/TsRYhToP2CI/AAAAAAAABfE/7j5TikginMI/s640/rtw.png" alt="" /></p>

<p>如果你从来没有到过非洲,你应该去一次.那里的景色原始而美丽,对那些没有体验过这种景色的人,你很难用言语描绘明白.几年前我就喜欢上了南方,那时我在东海岸做了一个为期3个月的冲浪旅行.这次,我只有一个月的时间,穿越特兰斯凯,从开普敦到德班.当我在南非旅行时,我的写作也开始了,把早期向O'Reilly提交的书的框架里的数章填充了材料.</p>

<p>特兰斯凯是南非非常具有乡野特色的地方,到处是连绵的小山,一些小村庄和土堆的茅屋.他们仍然沿袭着酋长制度,有一个首领,大多数的当地人靠捕鱼为生.我们在高低不平的土路上颠了两天才到达我心仪的地方,一个美丽的海湾,叫做咖啡湾(Coffee Bay).在那里,我休整了一下,从网上下载了一些相关资料,为更远的海湾远征做准备.</p>

<p>我还清晰的记得我们走了数里地来到那个未开垦的海滩,我们从那些一个个被黄沙和小丘孤立的村庄穿行而过.有一个地方,我们要过一条大河,我们需要游过去,我把背包举过头顶,以免里面的相机和iPod遇到水.非洲是一个让你脱离尘世的地方,解放你的思想,重新认识人生最重要的东西是什么.</p>

<p><img src="https://lh6.googleusercontent.com/-t9Ja-8BnWvM/TOzGcHEVcLI/AAAAAAAAA_I/Gbk7HpkAlyE/s640/DSC_0164.jpg" alt="" /></p>

<p>下一站是香港,在那里,我度过了我的21岁生日,接着,我从陆路由新加坡到越南河内.很多人不相信香港70%的面积由自然公园覆盖,我徒步走了几条精彩的景观路线,非常的精彩壮观,比如:香港龙脊.有几天,我在boot.hk这个网站上闲逛,这是一个协作工作的网站,我顺便教了一个同行的游客如何使用Ruby.然后,到了夜里,我跟Soho里的一些<a href="http://couchsurfing.org/">冲浪爱好者</a>狂欢到凌晨.</p>

<p><img src="https://lh5.googleusercontent.com/-w4dOtoMx8FQ/TP92f1yaUgI/AAAAAAAAA_I/CkWZJTnj24s/s640/DSC_0032.jpg" alt="" /></p>

<p>从泰国到柬埔寨到越南是我这次旅行中做喜欢的部分,如果你从没有到过亚洲,你绝对应该去一次.这些国家非常的漂亮,气候非常的好,食物美味可口,人们非常友善.吴哥窟是世上最神奇的地方之一,每个人都应该去看看.是<a href="http://stuckincustoms.com/">Trey Ratcliff</a>的照片把我吸引到了那里,我的很多其它旅游目的地也是受了他的影响.那个家伙是很多旅游地的第一宣传者.</p>

<p><img src="https://lh6.googleusercontent.com/-bLvyRFra6DE/TShMHEaRv5I/AAAAAAAAA_I/cOGMjy8WTyU/s640/DSC_0031.jpg" alt="" /></p>

<p>在一些无名的小博客中,我听有人说过一个很远的美丽的小岛,在柬埔寨的海边.说小岛的Sihanoukville这个地方有个酒吧,说只能坐小渔船到那里.我,还有几个非常好的朋友,乘坐晚上的大巴,开始寻找这个传说中的酒吧.搜索差不多进行了一整天,每一个问过的酒吧都把我们指向另外一个酒吧.最终,我们问了出来,并在第二天早晨做短程巴士去了那个地方.</p>

<p><img src="https://lh5.googleusercontent.com/-dyNjvQtn4GA/TTZ6x3dT0WI/AAAAAAAAA_I/PMQbesSbknU/s640/DSC_0039.jpg" alt="" /></p>

<p>上面的照片上是海岸边一个10美元一晚的小木屋.从当地居民区离开后,我们的队伍像小岛上唯一的人,我们随性自由的奔跑.白天我们懒懒的躺在海滩上,吃着岛上厨师准备的鲜美可口的水果沙拉,在夜晚,我们在到处是浮游生物的海里游泳.</p>

<p><img src="https://lh4.googleusercontent.com/-lLhNdn4DxvY/TTZ74Z7MhEI/AAAAAAAAA_I/TZBf2T5pADg/s640/DSC_0115.jpg" alt="" /></p>

<p>下一站是越南,我们沿着湄公河支流来到一个边界上的小镇,我们是这里唯一的西方人,交流成了最大的问题.幸运的是,我们发现一个也许是镇上唯一会说英语的人,他骑车当我们的向导.当我的信用卡被那里的一个自动取款机吞掉了后,他提供了我很大的帮助!</p>

<p><img src="https://lh6.googleusercontent.com/-r629c1pOE2E/TVCwrLAdL2I/AAAAAAAABBY/r48a8WSsTS0/s640/DSC_0059.jpg" alt="" /></p>

<p>我们的队伍分成了几路,在我到达越南时,我的书正在按计划完成,进行的非常顺利.此时,我在西贡多待了几周,让我在书的好几章上有了重大的进展,正好是中国旧历新年,气氛非常的壮观热闹.</p>

<p>接着是日本,澳大利亚,新西兰和夏威夷.我很难把我所有的感受都在这篇文章里写出来,但说这是此生难忘的一段历程是不为过的.把如此多的美景都放到一个国家里,太让人赞叹了,我说的正是新西兰.我最喜爱的一段记忆是沿着Wanaka的一个湖边在阳光下跑步,还有就是背着食物和生活用品,徒步数天穿越Routeburn的大山.在这个国家的旅途中,我结识了好几个值得一生相伴的好友.这是一个真正的天堂.</p>

<p>就在我环绕新西兰的南部岛屿时,我的书终于完成了,提交给了技术编辑校对.</p>

<p><img src="https://lh3.googleusercontent.com/-hVGczAgcsxw/TZqg8ATYqkI/AAAAAAAABLk/OYT0p-Cq4L0/s640/DSC_0096.jpg" alt="" /></p>

<p>接下来是纽约和旧金山,这两个神奇的地方到处是天才的程序员,有些人我很幸运的认识.Techcrunch Disrupt办的很精彩(我高度推荐hackathon).</p>

<p>在从纽约到旧金山的中途停留期间,我在各种公司了进行了不少的求职面试,最终在Twitter公司找到了一份做前端开发的工作.要在那里和杰出的团队一起工作,我不能不高兴的颤抖,而去旧金山,同样也是我此生的一个梦想.</p>

<p>当签证的事办下来了后,我去了中、南美洲旅行,同时开发了我的一个小工程:一个JavaScript MVC框架库,叫做Spine.我到了哥斯达黎加,巴拿马,秘鲁,Bolvia,和阿根廷. 秘鲁是我的最爱,尽管那里的海拔给我带来了不少麻烦,我大部分的时间都在探险.下面的图片是哥斯达黎加传说中神奇猎鹰,是在我爬下世界最深的峡谷时拍到的.</p>

<p><img src="https://lh3.googleusercontent.com/-kQInzZ5DQC0/TsXiz712K7I/AAAAAAAABfk/8GfSq98ccwU/s640/DSC_0027.jpg" alt="" /></p>

<p>当我在哥斯达黎加时,微博上有个叫Roberto的家伙给我发了条信息,说他读了我的书,问我是否有兴趣一起冲浪.我欣然同意,坐上去圣何塞的汽车,在几天后和他会了面.那天我们一起在他海边的公寓里开发Spine和Ruby项目,使用移动硬盘,用汽车电源给笔记本充电.当电量不足后,让太阳能板补充能量,我们去冲浪.</p>

<p><img src="https://lh5.googleusercontent.com/-ydIJPFqgspY/TsXgVzCENyI/AAAAAAAABfY/nkOE1Y0N-X4/s640/DSC_0300.jpg" alt="" /></p>

<p>我推荐大家去写一本书,特别是边旅游边写书.可以想象,如果我不去旧金山去看一看,我可能还在旅途中,做顾问,去创业.当作家并不能让你直接的挣到很多钱,但它绝对能提升你的身份地位,给你带来很多潜在的机会.事实上,写作过程让我真正享受的是,我可以认真深入的研究一个题目.</p>

<p><img src="http://ittopic.gotoip1.com/qee/wordpress/wp-content/uploads/2011/12/DSC_0069.jpg" alt="" /></p>

<p>这一年是我这辈子目前为止最好的一年,而我感觉今后的一年会更好.当我如今定居下来后,我并没有感觉旅行对我的吸引力减少了；我始终把签证放到一个口袋里,而另一个口袋里装着钱包,当召唤降临,随时准备离开.</p>

<p>可是,这篇文章并不是关于我的旅行,它是要发送一个信号:</p>

<p>对于程序员来说,有个得天独厚的条件,就是这种职业可以远程工作或边旅游边工作,这是其它职业办不到的.当然,也不都是这样,在我的旅途中,我没有碰到第二个跟我的做法相似的程序员.这种情况让人悲哀.我想向程序员们送出的信息是,不要再找借口了,行动起来,你可以做到.一个人只有一生,我可以向你保证,这样的生活才不枉世间走这一遭.</p>

<p>就像我,我感到极度的幸运,能这样的生活,去发现我的热情所在,去做每天我喜欢做的事情.你可以看出,大部分我现在的境遇并非偶然或侥幸,这是计划,追求,工作的结果.</p>

<p>一份汗水,一份收成.</p>

<p>这篇文章的目标不是做一些自我陶醉似的炫耀和大话,而是向大家演示如何立下目标,鼓励大家去做相似的事情.想清楚你现在的处境,这一年内你想得到什么,制定出一系列具体的能让你到达这些目标的步骤.追随你的梦想.</p>

<p>原文来自Alex MacCaw <a href="http://alexmaccaw.co.uk/posts/traveling_writing_programming">Traveling Writing Programming</a><br/>
本译文出自外刊IT评论 <a href="http://www.aqee.net/traveling-writing-programming/">旅行,写作,编程</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[加速 Ruby on Rails]]></title>
    <link href="http://xguox.github.com/blog/2011/12/25/ror-performance/"/>
    <updated>2011-12-25T17:14:00+08:00</updated>
    <id>http://xguox.github.com/blog/2011/12/25/ror-performance</id>
    <content type="html"><![CDATA[<p><a href="http://www.ibm.com/developerworks/cn/opensource/os-Railsn1/index.html">Repost</a></p>

<p>Ruby 语言常以其灵活性为人所称道.正如 Dick Sites 所言,您可以 &ldquo;为了编程而编程&rdquo;.Ruby on Rails 扩展了核心 Ruby 语言,但正是 Ruby 本身使得这种扩展成为了可能.Ruby on Rails 使用了该语言的灵活性,这样一来,无需太多样板或额外的代码就可以轻松编写高度结构化的程序:无需额外工作,就可以获得大量标准的行为.虽然这种轻松自由的行为并不总是完美的,但毕竟您可以无需太多工作就可以获得很多好的架构.</p>

<p>例如,Ruby on Rails 基于模型-视图-控制器(Model-View-Controller,MVC)模式,这意味着大多数 Rails 应用程序都可以清晰地分成三个部分.模型部分包含了管理应用程序数据所需的行为.通常,在一个 Ruby on Rails 应用程序中,模型和数据库表之间的关系是 1:1；Ruby on Rails 默认使用的对象关系映射(ORM)ActiveRecord 负责管理模型与数据库的交互,这意味着 Ruby on Rails 程序通常都具有(如果有的话)很少量的 SQL 代码.第二个部分是视图,它包含创建发送至用户的输出所需要的代码；它通常由 HTML、JavaScript 等组成.最后的一个部分是控制器,它将来自用户的输入转变为正确的模型,然后使用适当的视图呈现响应.</p>

<p>Rails 的倡导者通常都乐于将其易用性方面的提高归功于 MVC 范型 — 以及 Ruby 和 Rails 二者的其他一些特性,并称很少有程序员能够在较短的时间内创建更多的功能.当然,这意味着投入到软件开发的成本将能够产生更多的商业价值,因此 Ruby on Rails 开发愈发流行.</p>

<p>不过,最初的开发成本并不是事情的全部,还有其他的后续成本需要考虑,比如应用程序运行的维护成本和硬件成本.Ruby on Rails 开发人员通常会使用测试和其他的敏捷开发技术来降低维护成本,但是这样一来,很容易忽视具有大量数据的 Rails 应用程序的有效运行.虽然 Rails 能够简化对数据库的访问,但它并不总是能够如此有效.</p>

<h2>Rails 应用程序为何运行缓慢?</h2>

<p>Rails 应用程序之所以运行缓慢,其中有几个很基本的原因.第一个原因很简单:Rails 总是会做一些假设为您加速开发.通常,这种假设是正确而有帮助的.不过,它们并不总能有益于性能,并且还会导致资源使用的效率低下 — 尤其是数据库资源.</p>

<p>例如,使用等同于 <code>SELECT *</code>的一个 SQL 语句,ActiveRecord 会默认选择查询上的所有字段.在具有为数众多的列的情况下 — 尤其是当有些字段是巨大的 VARCHAR 或 BLOB 字段时 — 就内存使用和性能而言这种行为很有问题.</p>

<p>另一个显著的挑战是 <strong>N+1</strong> 问题,本文将对此进行详细的探讨.这会导致很多小查询的执行,而不是一个单一的大查询.例如,ActiveRecord 无从知道一组父记录中的哪一个会请求一个子记录,所以它会为每个父记录生成一个子记录查询.由于每查询的负荷,这种行为将导致明显的性能问题.</p>

<p>其他的挑战则更多地与  Ruby on Rails 开发人员的开发习惯和态度相关.由于 ActiveRecord 能够让如此众多的任务变得轻而易举,Rails 开发人员常常会形成 &ldquo;SQL 不怎样&rdquo; 的一种态度,即便在更适合使用 SQL 的时候,也会避免 SQL.创建和处理数量巨大的 ActiveRecord 对象的速度会非常缓慢,所以在有些情况下,直接编写一个无需实例化任何对象的 SQL 查询会更快些.</p>

<p>由于 Ruby on Rails 常被用来降低开发团队的规模,又由于 Ruby on Rails 开发人员通常都会执行部署和维护生产中的应用程序所需的一些系统管理任务,因此若对应用程序的环境知之甚少,就很可能出问题.操作系统和数据库有可能未被正确设置.比如,虽然并不最优,<code>MySQL my.cnf</code> 设置常常在 Ruby on Rails 部署内保留它们的默认设置.此外,可能还会缺少足够的监控和基准测试工具来提供性能的长期状况.当然,这并不是在责怪 Ruby on Rails 开发人员；这是非专业化导致的后果；在有些情况下,Rails 开发人员有可能是这两个领域的专家.</p>

<p>最后一个问题是 Ruby on Rails 鼓励开发人员在本地环境中进行开发.这么做有几个好处 — 比如,开发延迟的减少和分布性的提高 — 但它并不意味着您可以因为工作站规模的减少而只处理有限的数据集.他们如何开发以及代码将被部署于何处之间的差异可能会是一个大问题.即便您在一个性能良好的轻载本地服务器上处理小规模的数据已经很长一段时间,也会发现对于拥塞的服务器上的大型数据此应用程序会有很明显的性能问题.</p>

<p>当然,Rails 应用程序具有性能问题的原因可能有很多.查出 Rails 应用程序有何潜在性能问题的最佳方法是,利用能为您提供可重复、准确度量的诊断工具.</p>

<h2>检测性能问题</h2>

<p>最好的工具之一是 Rails 开发日志,它通常位于每个开发机器上的 <code>log/development.log</code> 文件内.它具有各种综合指标:响应请求所花费的总时间、花费在数据库内的时间所占的百分比、生成视图所花时间的百分比等.此外,还有一些工具可用来分析此日志文件,比如 development-log-analyzer.</p>

<p>在生产期间,通过查看 <code>mysql_slow_log</code>可以找到很多有价值的信息.更为全面的介绍超出了本文的讨论范围,更多信息可以在 <a href="http://www.ibm.com/developerworks/cn/opensource/os-Railsn1/index.html#resources">参考资料 </a>部分找到.</p>

<p>其中一个最强大也是最为有用的工具是 query_reviewer 插件(参见 <a href="http://www.ibm.com/developerworks/cn/opensource/os-Railsn1/index.html#resources">参考资料</a>).这个插件可显示在页面上有多少查询在执行以及页面生成需要多长时间.并且它还会自动分析 ActiveRecord 生成的 SQL 代码以便发现潜在问题.例如,它能找到不使用 MySQL 索引的查询,所以如果您忘记了索引一个重要的列并由此造成了性能问题,那么您将能很容易地找到这个列(有关 MySQL 索引的更多信息,参见 <a href="http://www.ibm.com/developerworks/cn/opensource/os-Railsn1/index.html#resources">参考资料</a>).此插件在一个弹出的 <code>&lt;div&gt;</code>(只在开发模式下可见)中显示了所有这类信息.</p>

<p>最后,不要忘记使用类似 Firebug、yslow、Ping 和 tracert 这样的工具来检测性能问题是来自于网络还是资源加载问题.</p>

<p>接下来,让我们来看具体的一些 Rails 性能问题及其解决方案.</p>

<h2>N+1 查询问题</h2>

<p>N+1 查询问题是 Rails 应用程序最大的问题之一.例如,清单 1 内的代码能生成多少查询?此代码是一个简单的循环,遍历了一个假想的 post 表内的所有 post,并显示 post 的类别和它的主体.</p>

<h3>清单 1. 未优化的 Post.all 代码</h3>

<p><code>ruby
&lt;%@posts = Post.all(@posts).each do |p|%&gt;
  &lt;h1&gt;&lt;%=p.category.name%&gt;&lt;/h1&gt;
  &lt;p&gt;&lt;%=p.body%&gt;&lt;/p&gt;
&lt;%end%&gt;
</code></p>

<p>答案:上述代码生成了一个查询外加  <code>@posts</code> 内的每行一个查询.由于每查询的负荷,这可能会成为一个很大的挑战.罪魁祸首是对 <code>p.category.name</code> 的调用.这个调用只应用于该特定的 <code>post</code> 对象,而不是整个 <code>@posts</code> 数组.幸好,通过使用立即加载,我们可以修复这个问题.</p>

<p>立即加载 意味着 Rails 将自动执行所需的查询来加载任何特定子对象的对象.Rails 将使用一个 <code>JOIN</code> SQL 语句或一个执行多个查询的策略.不过,假设指定了将要使用的所有子对象,那么将永远不会导致 N+1 的情形,在 N+1 情形下,一个循环的每个迭代都会生成额外的一个查询.清单 2 是对 清单 1 内代码的修订,它使用了立即加载来避免 N+1 问题.</p>

<h3>清单 2. 用立即加载优化后的 Post.all 代码</h3>

<p><code>ruby
&lt;%@posts = Post.find(:all, :include=&gt;[:category]
  @posts.each do |p|%&gt;
  &lt;h1&gt;&lt;%=p.category.name%&gt;&lt;/h1&gt;
  &lt;p&gt;&lt;%=p.body%&gt;&lt;/p&gt;
&lt;%end%&gt;
</code></p>

<p>该代码最多生成两个查询,而不管在此 <code>posts</code> 表内有多少行.</p>

<p>当然,并不是所有情况都如此简单.处理复杂的 N+1 查询情况需要更多的工作.那么做这么多努力值得么?让我们来做一些快速的测试.</p>

<h2>测试 N+1</h2>

<p>使用清单 3 内的脚本,可以发现查询可以达到 — 多慢 — 或多快. 清单 3 展示了如何在一个独立脚本中使用 ActiveRecord 来建立一个数据库连接、定义表并加载数据.然后,可以使用 Ruby 的内置基准测试库来查看哪种方式更快,快多少.</p>

<h3>清单 3. 立即加载基准测试脚本</h3>

<p>```ruby
require &lsquo;Rubygems&rsquo;
require &lsquo;faker&rsquo;
require &lsquo;active_record&rsquo;
require &lsquo;benchmark&rsquo;</p>

<h1>This call creates a connection to our database.</h1>

<p>ActiveRecord::Base.establish_connection(
  :adapter  => &ldquo;mysql&rdquo;,
  :host     => &ldquo;127.0.0.1&rdquo;,
  :username => &ldquo;root&rdquo;, # Note that while this is the default setting for MySQL,
  :password => &ldquo;&rdquo;,     # a properly secured system will have a different MySQL</p>

<pre><code>                        # username and password, and if so, you'll need to
                        # change these settings.
</code></pre>

<p>  :database => &ldquo;test&rdquo;)</p>

<h1>First, set up our database&hellip;</h1>

<p>class Category &lt;  ActiveRecord::Base
end</p>

<p>unless Category.table_exists?
  ActiveRecord::Schema.define do</p>

<pre><code>create_table :categories do |t|
    t.column :name, :string
end
</code></pre>

<p>  end
end</p>

<p>Category.create(:name=>&lsquo;Sara Campbell\&rsquo;s Stuff&rsquo;)
Category.create(:name=>&lsquo;Jake Moran\&rsquo;s Possessions&rsquo;)
Category.create(:name=>&lsquo;Josh\&rsquo;s Items&rsquo;)
number_of_categories = Category.count</p>

<p>class Item &lt;  ActiveRecord::Base<br/>
  belongs_to :category<br/>
end</p>

<h1>If the table doesn&rsquo;t exist, we&rsquo;ll create it.</h1>

<p>unless Item.table_exists?
  ActiveRecord::Schema.define do</p>

<pre><code>create_table :items do |t|
    t.column :name, :string
    t.column :category_id, :integer 
end
</code></pre>

<p>  end
end</p>

<p>puts &ldquo;Loading data&hellip;&rdquo;</p>

<p>item_count = Item.count
item_table_size = 10000</p>

<p>if item_count &lt; item_table_size
  (item_table_size &ndash; item_count).times do</p>

<pre><code>Item.create!(:name=&gt;Faker.name, 
             :category_id=&gt;(1+rand(number_of_categories.to_i)))
</code></pre>

<p>  end
end</p>

<p>puts &ldquo;Running tests&hellip;&rdquo;</p>

<p>Benchmark.bm do |x|
  [100,1000,10000].each do |size|</p>

<pre><code>x.report "size:#{size}, with n+1 problem" do 
  @items=Item.find(:all, :limit=&gt;size)
  @items.each do |i| 
    i.category
  end 
end 
x.report "size:#{size}, with :include" do 
  @items=Item.find(:all, :include=&gt;:category, :limit=&gt;size)
  @items.each do |i| 
    i.category
  end 
end 
</code></pre>

<p>  end
end
```</p>

<p>这个脚本使用 <code>:include</code> 子句测试在有和没有立即加载的情况下对 100、1,000 和 10,000 个对象进行循环操作的速度如何.为了运行此脚本,您可能需要用适合于您的本地环境的参数替换此脚本顶部的这些数据库连接参数.此外,需要创建一个名为 test 的 MySQL 数据库.最后,您还需要 ActiveRecord 和 faker 这两个 gem,二者可通过运行 <code>gem install activerecord faker</code> 获得.</p>

<p>在我的机器上运行此脚本生成的结果如清单 4 所示.</p>

<h3>清单 4. 立即加载的基准测试脚本输出</h3>

<p>```ruby
&mdash; create_table(:categories)
   &ndash;> 0.1327s
&mdash; create_table(:items)
   &ndash;> 0.1215s
Loading data&hellip;
Running tests&hellip;</p>

<pre><code>  user     system      total        real
</code></pre>

<p>size:100, with n+1 problem  0.030000   0.000000   0.030000 (  0.045996)
size:100, with :include  0.010000   0.000000   0.010000 (  0.009164)
size:1000, with n+1 problem  0.260000   0.040000   0.300000 (  0.346721)
size:1000, with :include  0.060000   0.010000   0.070000 (  0.076739)
size:10000, with n+1 problem  3.110000   0.380000   3.490000 (  3.935518)
size:10000, with :include  0.470000   0.080000   0.550000 (  0.573861)
```</p>

<p>在所有情况下,使用 :include 的测试总是更为迅速 — 分别快 5.02、4.52 和 6.86 倍.当然,具体的输出取决于您的特定情况,但立即加载可明显导致显著的性能改善.</p>

<h2>嵌套的立即加载</h2>

<p>如果您想要引用一个嵌套的关系 — 关系的关系,又该如何呢? 清单 5 展示了这样一个常见的情形:循环遍历所有的 post 并显示作者的图像,其中 Author 与 Image 是 belongs_to 的关系.</p>

<h3>清单 5. 嵌套的立即加载用例</h3>

<p><code>ruby
@posts = Post.all
@posts.each do |p|  
  &lt;h1&gt;&lt;%=p.category.name%&gt;&lt;/h1&gt;
  &lt;%=image_tag p.author.image.public_filename %&gt;
  &lt;p&gt;&lt;%=p.body%&gt;
 &lt;%end%&gt;
</code></p>

<p>此代码与之前一样亦遭遇了相同的 N+1 问题,但修复的语法却没有那么明显,因为这里所使用的是关系的关系.那么如何才能立即加载嵌套关系呢?</p>

<p>正确的答案是使用 <code>:include</code> 子句的哈希语法.清单 6 给出了使用哈希语法的一个嵌套的立即加载.</p>

<h3>清单 6. 嵌套的立即加载解决方案</h3>

<p>```ruby
@posts = Post.find(:all, :include=>{ :category=>[],</p>

<pre><code>                                   :author=&gt;{ :image=&gt;[]}} )
</code></pre>

<p>@posts.each do |p|<br/>
  <h1>&lt;%=p.category.name%></h1>
  &lt;%=image_tag p.author.image.public_filename %>
  <p>&lt;%=p.body%>
 &lt;%end%>
```</p>

<p>正如您所见,您可以嵌套哈希和数组实量(literal).请注意在本例中哈希和数组之间的惟一区别是哈希可以含有嵌套的子条目,而数组则不能.否则,二者是等效的.</p>

<h2>间接的立即加载</h2>

<p>并非所有的 N+1 问题都能很容易地察觉到.例如,清单 7 能生成多少查询?</p>

<h3>清单 7. 间接的立即加载示例用例</h3>

<p>```ruby
  &lt;%@user = User.find(5)</p>

<pre><code>@user.posts.each do |p|%&gt;   
  &lt;%=render :partial=&gt;'posts/summary',  :locals=&gt;:post=&gt;p
 %&gt; &lt;%end%&gt;
</code></pre>

<p>```</p>

<p>当然,决定查询的数量需要对 <code>posts/summary</code> partial 有所了解.清单 8 中显示了这个 partial.</p>

<h3>清单 8. 间接立即加载 partial: posts/_summary.html.erb</h3>

<p>  <code>&lt;h1&gt;&lt;%=post.user.name%&gt;&lt;/h1&gt;</code>
不幸的是,答案是 <strong>清单 7</strong><em> 和 <strong>清单 8</strong></em> 在 post 内每行生成一个额外查询,查找用户的名字 — 即便 post 对象由 ActiveRecord 从一个已在内存中的 User 对象自动生成.简言之,Rails 并不能关联子记录与其父记录.<br/>
修复方法是使用自引用的立即加载.基本上,由于 Rails 重载由父记录生成的子记录,所以需要立即加载这些父记录,就如同父与子记录之间是完全分开的关系一样.代码如清单 9 所示.</p>

<h3>清单 9. 间接的立即加载解决方案</h3>

<p>  <code>ruby
  &lt;%@user = User.find(5, :include=&gt;{:posts=&gt;[:user]})
  ...snip...
 </code></p>

<p>虽然有悖于直觉,但这种技术与上述技术的工作原理大致相似.但是,很容易使用这种技术进行过多的嵌套,尤其是在体系结构复杂的情况下.简单的用例还好,比如 清单 9 内所示的,但繁复的嵌套也会出问题.在一些情况下,过多地加载 Ruby 对象有可能会比处理 N+1 问题还要缓慢 — 尤其是当每个对象并没有被整个树遍历时.在该种情况下,N+1 问题的其他解决方案可能更为适合.</p>

<p>一种方式是使用缓存技术.Rails V2.1 内置了简单的缓存访问.使用 Rails.cache.read、 Rails.cache.write 及相关方法,可以轻松创建自己的简单缓存机制,并且后端可以是一个简单的内存后端、一个基于文件的后端或一个分布式缓存服务器.在 <a href="http://www.ibm.com/developerworks/cn/opensource/os-Railsn1/index.html#resources">参考资料</a> 部分可以找到有关 Rails 内置缓存支持的更多信息.但您无需创建自己的缓存解决方案；您可以使用一个预置的 Rails 插件,比如 Nick Kallen 的 cache money 插件.这个插件提供了 write-through 缓存并以 Twitter 上使用的代码为基础.更多信息参见 <a href="http://www.ibm.com/developerworks/cn/opensource/os-Railsn1/index.html#resources">参考资料</a>.</p>

<p>当然,并不是所有的 Rails 问题都与查询的数量有关.</p>

<h2>Rails 分组和聚合计算</h2>

<p>您可能遇到的一个问题是在 Ruby 所做的工作本应由数据库完成.这考验了 Ruby 的强大程度.很难想象在没有任何重大激励的情况下人们会自愿在 C 中重新实现其数据库代码的各个部分,但很容易在 Rails 内对 ActiveRecord 对象组进行类似的计算.但是,Ruby 总是要比数据库代码慢.所以请不要使用纯 Ruby 的方式执行计算,如清单 10 所示.</p>

<h3>清单 10. 执行分组计算的不正确方式</h3>

<p><code>ruby
 all_ages = Person.find(:all).group_by(&amp;:age).keys.uniq
  oldest_age = Person.find(:all).max
</code></p>

<p>相反,Rails 提供了一系列的分组和聚合函数.可以像清单 11 所示的那样使用它们.</p>

<h3>清单 11. 执行分组计算的正确方式</h3>

<p><code>ruby
 all_ages = Person.find(:all, :group=&gt;[:age])  
  oldest_age = Person.calcuate(:max, :age)
</code>
ActiveRecord::Base#find 有大量选项可用于模仿 SQL.更多信息可以在 Rails 文档内找到.注意,calculate 方法可适用于受数据库支持的任何有效的聚合函数,比如 <code>:min</code>、<code>:sum</code> 和 <code>:avg</code>.此外,calculate 能够接受若干实参,比如 <code>:conditions</code>.查阅 Rails 文档以获得更详细的信息.</p>

<p>不过,并不是在 SQL 内能做的所有事情在 Rails 内也能做.如果插件不够,可以使用定制 SQL.</p>

<h2>用 Rails 定制 SQL</h2>

<p>假设有这样一个表,内含人的职业、年龄以及在过去一年中涉及到他们的事故的数量.可以使用一个定制  SQL 语句来检索此信息,如清单 12 所示.</p>

<h3>清单 12. 用 ActiveRecord 定制 SQL 的例子</h3>

<p>```ruby
sql = &ldquo;SELECT profession,</p>

<pre><code>          AVG(age) as average_age,  
          AVG(accident_count) 
     FROM persons 
    GROUP 
       BY profession"
</code></pre>

<p>Person.find_by_sql(sql).each do |row| <br/>
  puts &ldquo;#{row.profession}, &rdquo; &lt;&lt;</p>

<pre><code>   "avg. age: #{row.average_age}, " &lt;&lt;
   "avg. accidents: #{row.average_accident_count}"
</code></pre>

<p>end
```</p>

<p>这个脚本应该能生成清单 13 所示的结果.</p>

<h3>清单 13. 用 ActiveRecord 定制 SQL 的输出</h3>

<p><code>ruby
  Programmer, avg. age: 18.010, avg. accidents: 9
  System Administrator, avg. age: 22.720, avg. accidents: 8
</code>
当然,这是最简单的例子.您可以自己想象一下如何能将此例中的 SQL 扩展成一个有些复杂性的 SQL 语句.您还可以使用 <code>ActiveRecord::Base.connection.execute</code> 方法运行其他类型的 SQL 语句,比如 ALTER TABLE 语句,如清单 14 所示.</p>

<h3>清单 14. 用 ActiveRecord 定制非查找型 SQL</h3>

<p><code>ruby
  ActiveRecord::Base.connection.execute "ALTER TABLE some_table CHANGE COLUMN..."
</code></p>

<p>大多数的模式操作,比如添加和删除列,都可以使用 Rails 的内置方法完成.但如果需要,也可以使用执行任意 SQL 代码的能力.</p>

<h2>结束语</h2>

<p>与所有的框架一样,如果不多加小心和注意,Ruby on Rails 也会遭遇性能问题.所幸的是,监控和修复这些问题的技术相对简单且易学,而且即便是复杂的问题,只要有耐心并对性能问题的源头有所了解,也是可以解决的.</p>
]]></content>
  </entry>
  
</feed>
