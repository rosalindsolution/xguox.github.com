<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Translation | XguoX]]></title>
  <link href="http://xguox.github.com/blog/categories/translation/atom.xml" rel="self"/>
  <link href="http://xguox.github.com/"/>
  <updated>2014-03-19T18:23:53+08:00</updated>
  <id>http://xguox.github.com/</id>
  <author>
    <name><![CDATA[XguoX]]></name>
    <email><![CDATA[golvinlu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hidden Productivity Secrets With Alfred]]></title>
    <link href="http://xguox.github.com/blog/2013/10/28/hidden-productivity-secrets-with-alfred/"/>
    <updated>2013-10-28T15:07:00+08:00</updated>
    <id>http://xguox.github.com/blog/2013/10/28/hidden-productivity-secrets-with-alfred</id>
    <content type="html"><![CDATA[<p>好的开发人员总是在寻找可以让自己的工作流程更快速,更自动化的方法.<br/>
这次,我们带来的是<strong>Alfred的一系列workflows</strong>,它们可以极大的提高你的开发效率,相信你会为之震惊.</p>

<h3>What is Alfred?</h3>

<p>对于大多数了解不深的人来说,<a href="http://www.alfredapp.com/">Alfred</a>只是一个备受赞誉的Mac OS X app, 它可以快速地帮助你查找在线或者本地的文件. 最新的版本 <strong>Alfred 2</strong>更是带来了大量的改进,尤其是其中的<a href="http://www.alfredapp.com/powerpack/">Powerpack</a>,可以让你创建自己的workflows(工作流程).</p>

<p>下面你将会看到这些精心挑选出来的,能够改变你的工作方式的workflows.</p>

<h2>Open With Sublime Text</h2>

<p>强大的文件,目录搜索能力是Alfred所最让人喜爱的功能之一. 那如果我们想要利用它使用自己喜爱的编辑器(比如说Sublime Text 3)打开文件或者目录呢?</p>

<ul>
<li><a href="https://github.com/franzheidl/alfred-workflows/tree/master/open-with-sublime-text">Open With Sublime Text (v3)</a>, developed by <a href="https://github.com/franzheidl/">@franzheidl</a></li>
<li><a href="http://zno.io/RcAe">下载</a></li>
<li>触发: <code>subl</code>,<code>subl*</code></li>
</ul>


<p>想要其他编辑器的话请猛击 <a href="https://github.com/zenorocha/alfred-workflows/wiki/Extras#code-editors">Extras</a></p>

<p><img src="https://7nnqba.dm1.livefilestore.com/y2pGNECa5OJFUT2KVW5fKdahDKuCsRFn-r7el4QbFLC7ijAiYxRNxBI_COOWUq8W8-oKBvrS0eU7UyCFn129AtLp9eBjydEPpJzJwHMK8hIqMA/alfred-subl-opt.png?psid=1" alt="" /></p>

<p>XguoX: 可能更多人还是选择在终端直接用命令敲开.</p>

<h2>Can I Use&hellip; Workflow</h2>

<p>在HTML5时代,当使用某一个CSS属性或者JavaScript APIs之前,你需要检查知道浏览器是否支持. 当然,你可以打开浏览器,直接浏览<a href="http://caniuse.com/">Can I Use&hellip;</a>这个网站, 然后搜索某个关键字从而看看浏览器的支持情况.除此外,你还可以使用这个Alfred Workflow.</p>

<ul>
<li><a href="https://github.com/willfarrell/alfred-caniuse-workflow">Can I Use&hellip; Workflow</a>,developed by <a href="https://github.com/willfarrell/">@willfarrell</a></li>
<li><a href="http://zno.io/Rcex">下载</a></li>
<li>触发: <code>caniuse</code></li>
</ul>


<p><img src="https://7nnqba.dm2301.livefilestore.com/y2pLGL9Yh8RK9E6UUkjLPqhxSoA_Wofc3tyJuq-9DOmdK1fjtDTfmvBdegAJmCsO45T_Pf02opsLZ2YJXmhoXWy5HXUTmCw-3u-oJfUH9UERVU/alfred-caniuse-opt.png?psid=1" alt="" /></p>

<p>XguoX:搜索速度还行</p>

<h2>Dash Workflow</h2>

<p>没有人会知道某一门语言或者某一个框架的所有.我们时常会需要查找某个特定的method如何使用.最近,发现了一个非常惊艳的app,<a href="http://kapeli.com/dash">Dash</a>,在本地查找各类APIs文档,完全离线的说. 这还不算啥,通过这个workflow,你可以通过过滤各个语言(框架)关键字来查找相关文档.这个流弊的app可是免费的哦,所以,在使用这个workflow前请先安装好Dash.</p>

<ul>
<li><a href="https://github.com/willfarrell/alfred-dash-workflow">Dash Workflow</a>,developed by <a href="https://github.com/willfarrell/">@willfarrell</a></li>
<li><a href="http://zno.io/Rc3p">下载</a></li>
<li>触发:<code>dash</code> <code>html</code> <code>css</code> <code>gem</code> <code>angularjs</code> <code>Rails</code> 基本上常用的语言框架库都有了</li>
</ul>


<p><img src="https://7nnqba.dm1.livefilestore.com/y2p8jXte6unkiz4tr4VJFW9zTtwY5LHw6TPj8Bhx6IOm_bI2eU-6GyzBMx8DdEbI6jsLcPz7ttB9S1FqNDA9q8rU4JsouoEspKKgbjj2k-EQLA/alfred-dash-bs-opt.png?psid=1" alt="" />
<img src="https://7nnqba.dm2302.livefilestore.com/y2pxzqD2DRpB4rhywnWViFn5zJMrjn59dI_lKaX4wCj9HTSO40hX1NSuRoCJGObJMCHdRB-bkmuYE9OPQePbPjXcaVli3J3dETsLtKIPWx-aHU/alfred-dash-js-opt.png?psid=1" alt="" /></p>

<p>XguoX:Dash 真心很流弊!巨赞!!!</p>

<h2>Terminal Finder</h2>

<p>一些操作我们可能会希望在终端完成,而另一些则希望在Finder完成.这个workflow可以流畅地在这两者之间转换.在终端(iTerm)中打开当前的Finder窗口,反之亦然.</p>

<ul>
<li><a href="https://github.com/LeEnno/alfred-terminalfinder">TerminalFinder</a>, developed by <a href="https://github.com/LeEnno/">@LeEnno</a></li>
<li><a href="http://zno.io/RkU2">下载</a></li>
<li>触发: <code>ft</code> <code>tf</code> <code>fi</code> <code>if</code></li>
</ul>


<p><img src="https://7nnqba.dm2302.livefilestore.com/y2plpdCbBvSP7J7seYaCrTIdd0MPtXmqhhqDa-GPRjiO3nBza38J4jpFTetxVTAWfkafkiiTrqaikp-v3_Q-n2bTiBZj7rc3RvdO8OXgjJIhZU/alfred-fi-opt.png?psid=1" alt="" />
<img src="https://7nnqba.dm1.livefilestore.com/y2pKTdNdqK9KacL8BTdEMxozuH9vtTAC0qZTdO7wMa3VFtS0rjV_EXpOMKyYx_eqMAGvs6auzVGPw50UN-qYMJyeUVwZNihpyq8TbyYeyqUFyw/alfred-tf-opt.png?psid=1" alt="" /></p>

<p>XguoX:又是一个巨实用的workflow</p>

<h2>Package Managers Workflow</h2>

<p>代码复用是软件开发的一个重要组成部分,现如今我们有很多的方案来构建我们的代码以及搜索使用第三方软件包. 想要使用某个Node.js module? Grunt task?通过这个workflow,你可以快速简便地在一个地方通过你想要的包管理器查找到你想要的插件或者组件.</p>

<ul>
<li><a href="https://github.com/willfarrell/alfred-pkgman-workflow">Package Managers Workflow</a>, developed by <a href="https://github.com/willfarrell/">@willfarrell</a></li>
<li><a href="https://github.com/willfarrell/">下载</a></li>
<li>触发: <code>bower</code> <code>grunt</code> <code>npm</code> <code>composer</code> <code>gems</code> <code>pear</code> <code>pypi</code> <code>cocoa</code> <code>brew</code> <code>alcatraz</code> <code>rpm</code> <code>maven</code> <code>docker</code></li>
</ul>


<p><img src="https://7nnqba.dm1.livefilestore.com/y2ppAHAT45dOTn6bKbLSb4zC8iyK4bl8qlXjz7dsYx3h3lceulR1kHbZdz1wS5XiA5V6pzdJGxrpjKI-gwF6IpD1YNBNZCfYrQjp8YCi1R5fC8/alfred-pkg-npm-opt.png?psid=1" alt="" />
<img src="https://7nnqba.dm2302.livefilestore.com/y2pWCd9J95EnTh62aMYZ9zHDatkpfUg4qKScGsMpA-Fhy4FBtFBsJ8PkT-flubEWPpzY36rvmSRkv874m_pllj_80s9B0GaEu5XxWonxf6V02o/alfred-pkg-bower-opt.png?psid=1" alt="" />
<img src="https://7nnqba.dm1.livefilestore.com/y2pQTFJVwQuk4cV5yWHSoFYQCOanTC6JCB5UnfAqtUNouF6M38QLKC-k1d97hzFQi5HOGcI44owdzMcMJJUvmhJS-eLWBgwQjKEe4FDjwh6TWo/alfred-pkg-grunt-opt.png?psid=1" alt="" /></p>

<h2>Colors</h2>

<p>不用再每次想要转换某个颜色格式的时候打开Photoshop了.通过这个workflow可以很轻易在HEX, RGB, HSL这些个颜色格式之间转换.</p>

<ul>
<li><a href="https://github.com/TylerEich/Alfred-Extras/tree/master/Source/Colors">Colors</a>, developed by <a href="https://github.com/TylerEich/">@TylerEich</a></li>
<li><a href="http://zno.io/RcFz">下载</a></li>
<li>触发: <code>#</code> <code>rgb</code> <code>hsl</code> <code>c</code></li>
</ul>


<p><img src="https://7nnqba.dm2301.livefilestore.com/y2p57G91c-OHhp8vWr5mZDL3mvkawhRy64cCzIWzNEBlqL_EVbapnnvDeZUcVdCVtDJ4ow6hfm0cE1yB5AUViUp2A81StX_YpA7T_5mR_B7Rqk/alfred-colors-opt.png?psid=1" alt="" /></p>

<h2>Jenkins Workflow</h2>

<p>做单元测试固然是好,但是每更改一行代码就手动跑一次测试的话会让人抓狂的. 为了得到更好的代码质量,我们需要跑跟更多的测试,或者至少的自动运行那些我们已经在跑的测试. 这就是为嘛<strong>持续集成系统</strong>那么重要.通过这个workflow,你可以列出<a href="http://jenkins-ci.org/">Jenkins</a>的所有工作以及它们的状态.</p>

<ul>
<li><a href="https://github.com/jeroenseegers/alfred-jenkins-workflow">Jenkins Workflow for Alfred v2</a>, developed by <a href="https://github.com/jeroenseegers/">@jeroenseegers</a></li>
<li><a href="https://github.com/jeroenseegers/alfred-jenkins-workflow/raw/master/Jenkins.alfredworkflow">下载</a></li>
<li>触发: <code>jenkins status</code></li>
</ul>


<p><img src="https://7nnqba.dm2302.livefilestore.com/y2p1OLZbpkCxnoR1-ucaW61I99PIVPvOO_136IItknkfT8GvIGdr9lMaF8P78koNZB9q4_Wxld8CzdfdYegwtcTkOMkdbAtb1A3kPK-8WOlsHw/alfred-jenkins-opt.png?psid=1" alt="" /></p>

<p>XguoX:好吧,这玩意没接触过</p>

<h2>Open in FileZilla</h2>

<p>目前来说传输文件到Web服务器的最流行方式还是使用FTP. 而这个workflow可以帮助你快速地通过<a href="https://filezilla-project.org/">FileZilla</a>连接到远程服务器端. FileZilla也是一个免费的应用,所以,在用这个workflow之前请记得先安装之.</p>

<ul>
<li><a href="https://github.com/jeffmagill/alfred-open-in-filezilla">Open in FileZilla</a>, developed by <a href="https://github.com/jeffmagill/">@jeffmagill</a></li>
<li><a href="http://zno.io/RnTx">下载</a></li>
<li>触发: <code>fz</code></li>
</ul>


<p>在用其他FTP客户端吗?请猛击 <a href="https://github.com/zenorocha/alfred-workflows/wiki/Extras#ftp">Extras</a></p>

<p><img src="https://7nnqba.dm1.livefilestore.com/y2pb9b3kwcHV5UkchYzjh4f-Jw_YMi0uHVYkNeM_0A4g4859bfjcc49jLLQcyTpsOu2f-hOlh2D7sDSGAt65humZvmCuy3QFlH9tJHMAhlgLp4/alfred-fz-opt.png?psid=1" alt="" /></p>

<h2>Domainr Workflow</h2>

<p>不想错过一些帅气的域名的话,可以通过<a href="https://domai.nr/">Domainr</a> APIs快速查找.</p>

<ul>
<li><a href="https://github.com/dingyi/Alfred-Workflows/tree/master/Domainr">Domainr Workflow</a>, developed by <a href="https://github.com/dingyi/">@dingyi</a></li>
<li><a href="http://zno.io/RctP">下载</a></li>
<li>触发: <code>domainr</code></li>
</ul>


<p><img src="https://7nnqba.dm2301.livefilestore.com/y2pQl13GHOojZONNNtZnsAeO2IKT6fe1AMAt0uR-SSL5MJQgw-wJ66ZqFNHXS4t7S5X4Osl31-d0jAJ65uishVIPvmNU7L09CfJ19v_Gxi1f7A/alfred-domain-opt.png?psid=1" alt="" /></p>

<h2>Encode / Decode</h2>

<p>有时候, 我们需要把一些UTF-8字符转换成HTML编码,或是解码某个URL. 使用 Encode / Decode , 这些杂碎的事情将不再需要浪费那么多的时间了.</p>

<ul>
<li><a href="https://github.com/willfarrell/alfred-encode-decode-workflow">Encode / Decode</a>, developed by <a href="https://github.com/willfarrell/">@willfarrell</a></li>
<li><a href="http://zno.io/RcCX">下载</a></li>
<li>触发: <code>encode</code> <code>decode</code></li>
</ul>


<p><img src="https://7nnqba.dm2302.livefilestore.com/y2pKvZ6_kJuc6jkwn90DdrOihAOhM5W7fKS7-AoHkhTC41bHpKjagM54XHIYXBYOSPuxivPJ58mAmETym0mdNXAip6qJBJCkxap46HOKzj8W_E/687474703a2f2f662e636c2e6c792f6974656d732f324a336d3147314-e34363035304930453077336e2f616c667265642d656e636f64652e706e67-opt.png?psid=1" alt="" /></p>

<h2>Font Awesome Workflow</h2>

<p>Font icons很好很强大, 只需简单地输入类似的<code>&lt;i class="my-icon-name"&gt;&lt;/i&gt;</code>. 但问题是,我们经常没能准确地记住我们需要的某个icon的类名,以至于老需要去翻看文档. 现在的话通过这个workflow我们可以很轻易地查找到<a href="http://fortawesome.github.io/Font-Awesome/">Font Awesome</a>的icon集.</p>

<ul>
<li><a href="https://github.com/ruedap/alfred2-font-awesome-workflow">Font Awesome Workflow for Alfred 2</a>, developed by <a href="https://github.com/ruedap/">@ruedap</a></li>
<li><a href="http://zno.io/RcJ3">下载</a></li>
<li>触发: <code>fonta</code></li>
</ul>


<p><img src="https://7nnqba.dm2301.livefilestore.com/y2pHAy4Zg3y3qg293hawHzh1DKDkB1ZUd7Ktbw9BtrL7QxRzvJPGIR-B_OUF-fjyx3wq1sn4OrZ72XCQdlHOys6gHOqyjGGbFnwiElSVCkMNxU/alfred-fonta-opt.png?psid=1" alt="" /></p>

<p>XguoX:赞!</p>

<h2>Source Tree Workflow</h2>

<p>有人习惯在终端使用Git命令, 也有喜欢使用GUI工具. 如果你属于后者,那么<a href="http://www.sourcetreeapp.com/">Source Tree</a> workflow 可以帮你列出,查找,打开Git仓库. Source Tree 也是需要在使用这个workflow之前先<a href="http://www.sourcetreeapp.com/">下载</a>安装的应用.</p>

<ul>
<li><a href="https://github.com/zhaocai/alfred2-sourcetree-workflow">Source Tree</a>, developed by <a href="https://github.com/zhaocai/">@zhaocai</a></li>
<li><a href="http://zno.io/Ro6V">下载</a></li>
<li>触发: <code>st</code>  <code>stbookmark</code></li>
</ul>


<p>使用其他的Git客户端吗?请猛击 <a href="https://github.com/zenorocha/alfred-workflows/wiki/Extras#git-client">Extras</a></p>

<p><img src="https://7nnqba.dm2302.livefilestore.com/y2peE5UpatyaBm2USKGJSTP6O-ATHnG5dIkbF_cgAXjVLyUZIJfAjCi-FdRs2E44Me5gKsYygNc6ojyzuCmFfnUnAePfelKmZpB1OmgngYUh1M/alfred-st1-opt.png?psid=1" alt="" /></p>

<h2>GitHub Workflow</h2>

<p>如果你最喜欢的社交网站是Github,那你一定会想要看看这个.简单快速地查找并在浏览器打开Github上的仓库.</p>

<ul>
<li><a href="https://github.com/gharlan/alfred-github-workflow">GitHub Workflow</a>, developed by <a href="https://github.com/gharlan/">@gharlan</a></li>
<li><a href="http://zno.io/RcPe">下载</a></li>
<li>触发: <code>gh</code></li>
</ul>


<p><img src="https://7nnqba.dm2302.livefilestore.com/y2p8Kw5ylIUxXvwnWm1HOp4xQcI2AH9fPU0is_zRQvkLws07H-KINpP86ZbEvywJ8F-IbF4umwGc802UCYyAJwHbXsrQjTD5jR9eni4Hn8v-3Y/alfred-gh-1-opt.png?psid=1" alt="" />
<img src="https://7nnqba.dm2302.livefilestore.com/y2pAHDVk52bx4FuN7ArITttR0iKhUmXlAenZxif_r6XKjlY7zIdeL57L86L8wTu4a6dHOptenChQ6hdGK12mz4ia1Awc7F1kf42-nF4rKzkbrg/alfred-gh-2-opt.png?psid=1" alt="" />
<img src="https://7nnqba.dm2301.livefilestore.com/y2pca8u5ITeeKV3q7PAYkeJ26fM5wfHUmFvSjhjS3vfxHWTx8zXT5PQgeZagvY_b6gIUFTMYMdO3B5n-DnWzI-g3Gdxd7A4Tf-BQh75CSKr4UA/alfred-gh-3-opt.png?psid=1" alt="" /></p>

<h2>StackOverflow Workflow</h2>

<p>在<a href="http://stackoverflow.com/">StackOverflow</a>搜寻各类编程问题的答案</p>

<ul>
<li><a href="https://github.com/xhinking/Alfred">StackOverflow Workflow</a>, developed by <a href="https://github.com/xhinking/">@xhinking</a></li>
<li><a href="http://zno.io/RceO">下载</a></li>
<li>触发: <code>st</code></li>
</ul>


<p><img src="https://7nnqba.dm2302.livefilestore.com/y2pmY5gf1twVGB0cDn-C51fasEXdMo79AFhftB4mJqKzQwshL_a0djKiDcoVu6-NP1QMQ360iBdpNf8Pp7cJ5qxc_XZbcoC_C427S0ty9cdMmI/alfred-st-opt.png?psid=1" alt="" /></p>

<h2>TimeZones Workflow</h2>

<p>现如今,很多的团队的成员纷纷来自全球各地. 那么,我们不会希望在同事的下班时间去打搅人家.所以,在这之前,我们总会先查看一下对方的当地时间.这个workflow可以巨方便地列出世界各地不同城市的当前时间.</p>

<ul>
<li><a href="http://www.alfredforum.com/topic/491-timezones-a-world-clock-script-filter-updated-to-v161/">TimeZones Workflow</a>, developed by <a href="http://www.alfredforum.com/topic/491-timezones-a-world-clock-script-filter-updated-to-v161/">@CarlosNZ</a></li>
<li><a href="http://zno.io/Rce5">下载</a></li>
<li>触发: <code>tz</code></li>
</ul>


<p><img src="https://7nnqba.dm2302.livefilestore.com/y2pEw7Fm3pjrusK0c-ihMHdrPo-1oCLOyC6kjipiDXwTsn7OJS3is0zRPDYu6Sy-M80x29f0lVww1ACceNo2LtgksPzQHW-yf0HQ4ZtgilKZVs/alfred-tz-opt.png?psid=1" alt="" /></p>

<h2>VirtualBox Control</h2>

<p>很不幸地,跨浏览器兼容的仍然是开发人员所面临的一大问题. 测试你的网站在不同浏览器 &amp; 不同操作系统 是否运行正常是件无法逃避的事. 使用虚拟机(比如<a href="https://www.virtualbox.org/">VirtualBox</a>)是当下流行的,可以完成这事的一种方式. 好吧,在用这个workflow之前老规矩,先装上VirtualBox.</p>

<ul>
<li><a href="https://github.com/aiyodk/Alfred-Extensions/tree/master/AlfredApp_2.x/VirtualBox-Control">VirtualBox Control</a>, developed by <a href="https://github.com/aiyodk">@aiyodk</a></li>
<li><a href="http://zno.io/RyOE">下载</a></li>
<li>触发: <code>vm</code></li>
</ul>


<p>在用其他的虚拟机客户端吗?请猛击 <a href="https://github.com/zenorocha/alfred-workflows/wiki/Extras#virtual-machines">Extras</a></p>

<p><img src="https://7nnqba.dm2301.livefilestore.com/y2psvNKnOmlDIHPBDdt55ZjXGXipYEXF1vywXnx7K0QWXLTlFzs34ntkNcga99mClSZGNzkG2ANop67cWYvEwkJzHDDualJDf7xIPTcKdVy3Og/alfred-vb-1-opt.png?psid=1" alt="" />
<img src="https://7nnqba.dm2302.livefilestore.com/y2pUUCXsiAOITeTEiZtDeQSoIQdmNUV0CayHgImh1MpczVHPlU-NUC0rIdVZqkztQ3bUBM7EWiu4SAkbl1eL3EMKFSsd2NFTJpjq8kDoCEJfOE/alfred-vb-2-opt.png?psid=1" alt="" /></p>

<h2>Create Your Own!</h2>

<p>所有的这些workflows都非常的赞并对于大多数人来说很有帮助. 但是,每个人的工作方式不尽相同. 所以我们需要创建真正属于自己的workflow. 其实这个也很是简单. 以下的这个例子仅需不到10秒,就可以创建一个workflow来自动搜寻Smashing Magazine.</p>

<p><img src="https://7nnqba.dm2301.livefilestore.com/y2p2GeFzQuRTl9E0-rFjNQrAw7qS_a5RAlZpfNQh9tT-P45-le3UY_fNKu7n1K5mIIq9JNdp83flsG9hvRzDHzcfXGuB56sspc6CnmRyDh2ikE/custom-alfred.gif?psid=1" alt="" /></p>

<h2>Want More?</h2>

<p><a href="https://github.com/zenorocha/alfred-workflows/">这是作者收集的一些</a><br/>
此外,Alfred的<a href="http://www.alfredforum.com/forum/3-share-your-workflows/">官方论坛</a>上也有海量的workflows.</p>

<h2>The End?</h2>

<p>一堆帮助你自动化工作流程的技巧,很赞对吧!希望能够对你有所帮助.可能这些会激发你的一些灵感,从而创造,分享你的隐藏技能.</p>

<p>如果你喜欢的workflow没有在这列出,可以在下边的评论当中跟我们分享. 如果你觉得上边提到的那些赞到爆的话,也可以告诉我们哦!</p>

<p>文章翻译自 <a href="http://coding.smashingmagazine.com/2013/10/25/hidden-productivity-secrets-with-alfred/">Hidden Productivity Secrets With Alfred</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何在一年里周游世界]]></title>
    <link href="http://xguox.github.com/blog/2013/04/13/how-to-travel-around-the-world-for-a-year/"/>
    <updated>2013-04-13T21:54:00+08:00</updated>
    <id>http://xguox.github.com/blog/2013/04/13/how-to-travel-around-the-world-for-a-year</id>
    <content type="html"><![CDATA[<p>在我的上一篇文章<a href="http://www.aqee.net/traveling-writing-programming/">traveling, writing and programming</a>中, 涵盖了我前一年的旅行, 写作, 编程. 而在这一篇文章中, 将会具体地对整一个旅程进行规划,  包括航班, 费用, 活动, 住宿等. 我会向你展示一个廉价实惠的计划.</p>

<blockquote><p>Travel is fatal to prejudice, bigotry, and narrow-mindedness. (旅行是克服偏见、自大、狭隘的最好方法.) &mdash;&mdash; Mark Twain</p></blockquote>

<p>远途旅行, 开阔视野, 我觉得这对于常年呆在硅谷的人来说尤为重要. 旅行可以让你见识到人们真真切切遇到的一些问题, 并使你有这样的机会去想办法解决掉, 而不是满脑子都是一些在家的琐碎想法. 一个新的视角, 一个新的想法,也或许就在你的旅途之中诞生.</p>

<p><img src="http://stuckincustoms.smugmug.com/Portfolio-The-Best/your-favorites/i-n54tcJV/0/M/The-Patagonia-L.jpg" alt="" /></p>

<!-- more -->


<h2>选择去哪里</h2>

<p>在最开始, 选取目的地会是一件让人头疼的事, 尤其是当你又对其他的国家都一无所知的时候更是如此. 前年, 我在南非呆过三个月, 于是,我决定从那些熟悉的地方开始进入到我的旅行节奏.</p>

<p>在作出选择之前, 我参观了<a href="http://www.stuckincustoms.com/"> Trey Ratcliff 的 HDR 摄影博客</a>. 事实上, 下面的所有照片都是来自于Trey.  这家伙已经把全世界都游遍了, 甚至还到过许多不可思议的地方.  我只是简单地浏览了他所到过的地方, 然后把我觉得最美丽的列了个清单. 其中列表如下:</p>

<blockquote><p>南非, 香港, 新加坡, 马来西亚, 泰国, 柬埔寨, 越南, 日本, 澳大利亚, 新西兰, 夏威夷, 纽约, 旧金山, 哥斯达黎加, 巴拿马, 秘鲁, 玻利维亚, 阿根廷</p></blockquote>

<p>我的目标是尽可能多的在一年内游览完, 然后在未来某个时候把一些地方再细致地重游一遍.  如果你没有这么多的时间, 我的建议是, 专注于某一个区域, 比如亚洲. 关于下一次旅行, 我的计划是:</p>

<blockquote><p>从北京启程, 坐火车到西藏, 往下到尼泊尔, 环游印度, 直到孟买, 然后飞往东南亚,  穿越泰国北部,柬埔寨,越南和老挝.</p></blockquote>

<p>所以, 换句话说, 你想去哪取决于你的时间, 预算和意愿.</p>

<p><img src="http://stuckincustoms.smugmug.com/Portfolio-The-Best/your-favorites/2035748576c051526ca4o/742619174_op5RY-M.jpg" alt="" /></p>

<h2>安排航班</h2>

<p>相较之过去的种种麻烦, 现在的环游世界机票已经让旅行变成一件轻松的事了.  曾经, <a href="http://bhutanheartslife.co.uk/">我的祖父</a>与女王的信使搭乘一架破旧的飞机一同前往不丹. 在那次飞行中途, 飞机的一个引擎坏了, 结果只能紧急迫降. 更糟糕的是, 在进行了必要的维修后, 他们又得继续搭乘这架飞机继续行程. 如今时代变迁了.</p>

<p>你可以逐个逐个航班的预订, 这会给你更大的灵活性, 也可以直接预订环球机票一次性把所有事情搞定. 出于经济上的考虑, 我选择了后者, 因为很多我需要的航班如果单独预订的话要贵的多.</p>

<p>环球机票的价格范围一般在$3K 到 $7,5K USD 之间. 我的16个航班大概花了$7K. 但实际上, 还是取决于你有的时间, 你飞往的地区以及从哪开始旅程. 这里有个秘诀, 就是在一个不太富裕的国家开始和结束你的旅程, 因为那样的机票通常都会便宜的多.</p>

<p>我是在<a href="http://www.oneworld.com/">OneWorld(寰宇一家)</a>预订的机票, 他们的服务让我非常高兴. 他们的集团包括有美国航空, 英国航空, 国泰航空 和 澳洲航空等. 并且还提供了一个很方便的<a href="http://oneworldrtw.innosked.com/Default.aspx">在线预订工具</a>来计划你的旅程.  无须给旅游代理哪怕一点的佣金, 你可以自己规划你的旅程. OneWorld的一个很好的地方在于它允许你免费更改航班的日期. 但航班的地点更改不是免费的, 所以你必须在做决定前确定你的选择是正确的.</p>

<p>环球机票还有一些限制, 这跟点到点的航线有所不同. 有一些会限制你的飞行里程, 有些则是限制了实际的航班数量. 大部分都会限制你在一个地方只能飞一次, 并且航行的方向是一般固定不变(比如一路往东). 在每一个地方你必须呆至少两周的时间, 大部分的票也都会在一年后到期.  之所以有这些限制的原因是他们不希望有人利用他们来通勤 , 所以在买的时候请记住这些.</p>

<p>我建议你只买洲际的航班, 而短途的航班则只在需要的时候才买. 在亚洲和南美这些地方之间游玩不需要专门的乘坐飞机, 完全可以搭乘当地的公交, 旅游车, 又或者买一辆车(?), 或者徒步行走. <strong>强烈建议你尽量的减少空中的飞行, 更多的在陆上游玩, 这样你看到的, 经历的会更多.</strong></p>

<p><img src="http://stuckincustoms.smugmug.com/Portfolio-The-Best/your-favorites/i-75F2Bvs/0/M/The-Palace-L.jpg" alt="" /></p>

<h1>行装</h1>

<p>只带上一些你确实需要的, 尽可能轻装上阵, 只用你的背就能搞定那就最好了.  从安全的角度着想你也应该这么做. 因为你携带的越多, 你就必须多加一双眼看着.</p>

<p>我刚刚从ebay买了一个90L的背包. 然后在里边塞了一个星期的衣服, 一条毛巾, 一套相机设备. 而实际上我在马来西亚就已经把我的三脚架和潜水服寄了回来. 对我来说他们太过笨重了. 当你发现一些需要的东西忘了带可以直接在当地买. 事实上,我一直坚持<a href="http://guynameddave.com/100-thing-challenge/">这种简约</a>的生活方式, 同时这也是我喜欢旅行的其中一点.</p>

<h2>预算&amp;住宿</h2>

<p>住宿是件简单的事, 尤其当你在一些亚洲很便宜的地方游玩的话. 因为我自己本身有这个预算, 所以一般都住在酒店 &ndash; 不包括一些在亚洲或者南非的古怪的酒店. 好的酒店比较难找到, 这需要你专门的在网上做一些调查. <a href="http://hostelworld.com/">Hotel World</a>, <a href="http://www.lonelyplanet.com/">Lonely Planet</a>, <a href="http://wikitravel.org/en/Main_Page">Wikitravel</a>都是不错的选择. 有些地方的设施对旅客非常的友好便利, 例如新西兰, 而有些则相反, 比如夏威夷和日本.</p>

<p>酒店也是一个非常好的地方可以结识到朋友, 还可以从他们那得到一些游玩的建议.  另外你也会遇上一些有趣的人. 我曾经遇到过的有半导体芯片设计师,专业潜水员和量子加密专家&hellip;我结识了一些驴友并和他们建立友谊, 这都是旅行所带给我的乐趣.</p>

<p>整一年我的总预算大概是$15K, 包括我的所有食宿.  这个数目对我来说刚刚好, 我不必住在特别的廉价的地方. 当然, 在你的银行卡上有一定的缓冲预算是好的, 因为这样你可以有个更安心的行程.</p>

<p><img src="http://stuckincustoms.smugmug.com/Portfolio-The-Best/your-favorites/i-nWqB7Jc/1/M/Tree-in-the-Park-M.jpg" alt="" /></p>

<h1>现金与电子产品</h1>

<p>我去的每一个城市都有ATM, 所以取得现金不是什么大的问题.  但我的卡曾经三次因为被怀疑欺诈行为而被冻结了. 我建议你告诉你的银行你的行程, 以免有什么不必要的麻烦. 出于安全考虑, 把你的一些信用卡分别放在不同的地方. 最好使用一些不会收取国际交易费的卡, 否则这可能会是一比大的支出.  很多地方不支持刷卡, 所以现金在手是必须的.</p>

<p>我已经有将近一年没有使用手机了, 取而代之的是我的iPod和Skype. 这其实并没有你听起来那么疯狂, 跟全世界断开联系一段时间事实上感觉挺好的. 由你来选择人们能否联系上你. 如果你确实需要一台手机, 做好国际长途的计划, 并且随时盯紧 &ndash; 否则的话被盗那是瞬间的事.</p>

<p>我去哪都随身带着我的Macbook和Nikon单反, 另外还有其他的一堆电子产品. 坦白地说, 这个世界并不是像人们想象的美国西部那般纷乱. 你只需要用平常心去对待就可以了.  或许我是幸运地, 因为在我的旅途中没有一样东西被偷.</p>

<p>插头(插座)也是一些必备的东西之一. 在亚洲使用的插座都是相似的, 可能你经常会遇到插不上的情况. 同样的, 在拉丁美洲, 也是没有接地线的插座.  美式三角插是用不上的, 所以你需要一个国际插头适配器.</p>

<p>WIFI几乎无处不有(在我的印象中越南的网速比美国还要好的多). 网络问题只在一些非洲偏远的地方才会遇上. 如果你想要去一些特别偏远的地方, 那么可能还需要带上一个3G的无线网卡. 在当地购买通常是最好的选择.</p>

<p><img src="http://stuckincustoms.smugmug.com/Portfolio-The-Best/your-favorites/The-Rest-of-the-India-Story/976924259_m5R2b-M.jpg" alt="" /></p>

<h2>活动和规划</h2>

<p>不管做什么, 永远不要选择套票. 我一般初头的两晚呆在飞机抵达的城市, 接着从那启程.  有时候, 我甚至不会逗留. 你需要给你的计划一些容错空间, 不要试图计划好没一个细节.  通常地, 你的计划会在你抵达后从其他旅行者那得到一些建议因此而改变. 随机应变那是必须的.</p>

<p>我个人从不去使用一些指南书籍, 我的基本指南来自于<a href="http://www.lonelyplanet.com/">Lonely Planet</a>. 想便宜一些买到的话则在你登陆的国家买这些指南, 而不是在机场或者你自己的国家买.</p>

<p><a href="http://wikitravel.org/">WikiTravel</a>是我每天都用到的很棒的资源. 但是, 最好的资源还是来自当地人和驴友们的建议. 我曾经在一本黑色的小型笔记本上记下了所有他们给我的好的建议.  我记得我遇到的一个阿根廷人在我的书上画了一张南美洲地图, 并列出了在秘鲁和智利他所推荐去的地方.</p>

<p><img src="http://stuckincustoms.smugmug.com/Portfolio-The-Best/your-favorites/2919966075b29ae42d88o/742622054_3o94P-M.jpg" alt="" /></p>

<h2>同伴</h2>

<p>同行的伙伴是会相互牵扯住的.  所以我建议自己一个人旅行, 强迫自己在路途上遇到更多有趣的人和结识更多朋友. 如果你和其他人一同旅行, 那么请确定你们是非常好的朋友, 因为长时间的旅途会让人变得烦躁.</p>

<h2>签证</h2>

<p>如果你很幸运的是一名美国或者欧洲公民, 那签证将不会有什么大问题. 唯一一个在过境时没有给我签证的国家是越南. 我只好在柬埔寨一间酒店里给了点钱一个家伙让他帮我把签证送到越南大使馆并处理之. 这事情值得提前做一些研究,不过通常来说是没问题的.</p>

<h2>安全保险</h2>

<p>For health insurance I just used World Nomads. They&rsquo;ve fairly competitive rates, and are one of the more dependable options.</p>

<p>That said, it&rsquo;s often a case of staying lucky and not doing anything stupid. All the insurance in the world won&rsquo;t help you if you have an emergency in a remote part of Africa.</p>

<h2>生活方式</h2>

<p>在离开之前我一般会在一个地方逗留上几天, 有时候最多会是一周.  当然, 基于那么频繁的转移, 偶尔的搁浅还是很舒服的.   每当产生那样感觉,我会停留在一个地方几个星期.比如, 为了使得我的书取得一些进展, 我在胡志明市停留了两周.</p>

<p>锻炼方面, 如果不去冲浪的话我会选择在海滩上跑至少半小时. 有更多的时间可以全身心地投入到你的健康, 是旅游的主要好处之一. 每天的冲浪和长跑, 持续几个月后换来的是我从未有过的强壮的身体.</p>

<p>同样的智力上的锻炼也是需要的, 我选择了写书来达到这个目的.  除此之外, 我还会做些阅读或者编程.  保持智力上的平衡是很重要的, 尤其在这么长时间的旅途中.</p>

<p>读完书后, 我会开始hack一些开源项目, 并开发了<a href="http://spinejs.com/">spine</a>. 事实上, spine的第一个版本是我在新西兰做长途车的时候写的. 插上耳机, 祛除杂念的专注于此, 很不可思议吧.</p>

<p>每当我旅行到一个新的城市,  就会提前在Ruby邮件列表发帖看看是否有人有兴趣来个聚会什么的.
很多时候都是成功的, 我会和这些人一起聚会然后向他们请教一些问题. 在东京和香港我还做了技术演讲.  在悉尼和开普敦则和当地的Ruby团队聚餐了.</p>

<h2>经验</h2>

<p>周游世界可以让你见识,经历到的比你想象中要多的多. 你可以获得国王般的口福, 从你不认识名字的马来西亚的美味水果, 到在阿根廷你所尝试过的最美味的牛排.  你可以在新西兰爬山, 以及秘鲁大峡谷徒步旅行.  还可以在哥斯达黎加难以忘怀的冲浪, 以及就像迎接世界末日那样的开party. 你会遇上一些令人惊奇的人, 改变生活的经历.</p>

<p>这一切都很简单,周游世界,将会是你做的最好的决定之一.</p>

<p><img src="http://stuckincustoms.smugmug.com/Portfolio-The-Best/your-favorites/Warm-Fisherman-in-Guilin/1043857172_py9xC-M.jpg" alt="" /></p>

<h2>总的开销</h2>

<p>整个行程的净成本大概是$22K, 我在为时一个月的事前咨询之前已经支付了其中的一大部分. 或许你会觉得这很夸张, 为了一年的旅行咨询一个月的时间. 我并没有刻意削减我的预算, 我知道有很多人可以花更少的钱完成这一切. 总而言之, 有志者, 事竟成.</p>

<p>边旅行边工作完全也可以成为一种新的生活方式. 如果你是一个程序员, 完全可以远程办公, 至少可以是一年之中的一部分时间远程.  你的客户不会关心你在哪里, 他们只关心你是否把事情做完. 要达到这样的位置所要付出的跟你成为一个成功的contractor是一样的. 那就是实践 和 网络.</p>

<p>坦白地说, 唯一要顾虑的事情只有一个, 时间不多了. 你身上的包袱, 顾虑会随着你的年龄的增加而增加, 在往上, 你想干这些事就更难了.  你应该丰富的是你的履历, 而不仅仅是金钱.</p>

<p>动力无非由两部分组成, 想的程度和可行性. 这些个东西我都完成了. 所以, 也希望看到更多的程序员远途的旅行.</p>

<p><img src="http://stuckincustoms.smugmug.com/Portfolio-The-Best/your-favorites/i-dLcWhrZ/0/M/The-Long-Road-in-NZ-M.jpg" alt="" /></p>

<p>原文来自Alex MacCaw <a href="http://alexmaccaw.com/posts/how_to_travel_around_the_world">How to travel around the world for a year.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Repost]旅行,写作,编程]]></title>
    <link href="http://xguox.github.com/blog/2013/04/13/traveling-writing-programming/"/>
    <updated>2013-04-13T21:53:00+08:00</updated>
    <id>http://xguox.github.com/blog/2013/04/13/traveling-writing-programming</id>
    <content type="html"><![CDATA[<p>概括起来,今年到目前为止,我所做的事情包括:</p>

<blockquote><ul>
<li>花了10个月的时间做世界环游,途经非洲,东南亚,澳洲,中南美洲里的17个国家和地区.这次旅行的主题就是冲浪和摄影.</li>
<li>出席在香港,日本,美国和伦敦举行的会议</li>
<li>启程时给O'Reilly出版公司写了一本书,书名叫做<a href="http://bit.ly/uFbFJR">《JavaScript Web Applications》</a></li>
<li>另外写了一本关于<a href="http://arcturo.github.com/library/coffeescript/">CoffeeScript</a>的书,很快就会由O'Reilly公司出版.</li>
<li>写了大量的开源库,例如<a href="http://spinejs.com/">Spine</a>, <a href="https://spinejs.com/mobile">Spine.Mobile</a>, <a href="http://maccman.github.com/gfx">GFX</a>, 和 <a href="http://github.com/maccman/juggernaut">Juggernaut</a>.</li>
<li>筹划了一个创业公司的框架</li>
<li>出席伦敦2011<a href="http://futureofwebapps.com/london-2011/">FOWA</a>会议</li>
<li>最后,我在Twitter公司找到了一份工作</li>
</ul>
</blockquote>

<!-- more -->


<p>那么,让我从一年前开始,那是2010年9月,我刚好从一个我合作创办的公司里出来,尽管这段经历是很有价值的,但无休无止的长时间苦干让我精疲力尽.我回到了英格兰,需要对未来做一些思考.我一直有一个梦想——移居美国(几年就好),所以,我在Google记事本上写了下面的话:</p>

<blockquote><p>人生的选择:
  去纽约哥伦比亚大学深造</p>

<pre><code>坏处 - 非常昂贵,并不一定能学到什么真正有用的东西,无聊?
好处 - 那是一个纽约的大学!
</code></pre>

<p>  写一本书,申请 01 签证</p>

<pre><code>坏处 - 需要大量的时间,有风险
好处 - 对事业有好处,有趣
</code></pre>

<p>  等待.去纽约度一次假(3个月).等待创业签证.</p>

<pre><code>很容易 - 不是那么有趣
</code></pre>

<p>也许选第二个,不行就选3?</p></blockquote>

<p>最终我选择了2,我已经对JavaScript web应用研究了很久,我要写一本这方面的书,为什么不边做环游世界的旅行、边写书呢?这也是我一个梦想呀.我从oneworld买了一份环游世界的机票(比你们想象的要便宜),决定下周去我的第一站,南非.</p>

<p><img src="https://lh5.googleusercontent.com/-H3VYHMYwDMk/TsRYhToP2CI/AAAAAAAABfE/7j5TikginMI/s640/rtw.png" alt="" /></p>

<p>如果你从来没有到过非洲,你应该去一次.那里的景色原始而美丽,对那些没有体验过这种景色的人,你很难用言语描绘明白.几年前我就喜欢上了南方,那时我在东海岸做了一个为期3个月的冲浪旅行.这次,我只有一个月的时间,穿越特兰斯凯,从开普敦到德班.当我在南非旅行时,我的写作也开始了,把早期向O'Reilly提交的书的框架里的数章填充了材料.</p>

<p>特兰斯凯是南非非常具有乡野特色的地方,到处是连绵的小山,一些小村庄和土堆的茅屋.他们仍然沿袭着酋长制度,有一个首领,大多数的当地人靠捕鱼为生.我们在高低不平的土路上颠了两天才到达我心仪的地方,一个美丽的海湾,叫做咖啡湾(Coffee Bay).在那里,我休整了一下,从网上下载了一些相关资料,为更远的海湾远征做准备.</p>

<p>我还清晰的记得我们走了数里地来到那个未开垦的海滩,我们从那些一个个被黄沙和小丘孤立的村庄穿行而过.有一个地方,我们要过一条大河,我们需要游过去,我把背包举过头顶,以免里面的相机和iPod遇到水.非洲是一个让你脱离尘世的地方,解放你的思想,重新认识人生最重要的东西是什么.</p>

<p><img src="https://lh6.googleusercontent.com/-t9Ja-8BnWvM/TOzGcHEVcLI/AAAAAAAAA_I/Gbk7HpkAlyE/s640/DSC_0164.jpg" alt="" /></p>

<p>下一站是香港,在那里,我度过了我的21岁生日,接着,我从陆路由新加坡到越南河内.很多人不相信香港70%的面积由自然公园覆盖,我徒步走了几条精彩的景观路线,非常的精彩壮观,比如:香港龙脊.有几天,我在boot.hk这个网站上闲逛,这是一个协作工作的网站,我顺便教了一个同行的游客如何使用Ruby.然后,到了夜里,我跟Soho里的一些<a href="http://couchsurfing.org/">冲浪爱好者</a>狂欢到凌晨.</p>

<p><img src="https://lh5.googleusercontent.com/-w4dOtoMx8FQ/TP92f1yaUgI/AAAAAAAAA_I/CkWZJTnj24s/s640/DSC_0032.jpg" alt="" /></p>

<p>从泰国到柬埔寨到越南是我这次旅行中做喜欢的部分,如果你从没有到过亚洲,你绝对应该去一次.这些国家非常的漂亮,气候非常的好,食物美味可口,人们非常友善.吴哥窟是世上最神奇的地方之一,每个人都应该去看看.是<a href="http://stuckincustoms.com/">Trey Ratcliff</a>的照片把我吸引到了那里,我的很多其它旅游目的地也是受了他的影响.那个家伙是很多旅游地的第一宣传者.</p>

<p><img src="https://lh6.googleusercontent.com/-bLvyRFra6DE/TShMHEaRv5I/AAAAAAAAA_I/cOGMjy8WTyU/s640/DSC_0031.jpg" alt="" /></p>

<p>在一些无名的小博客中,我听有人说过一个很远的美丽的小岛,在柬埔寨的海边.说小岛的Sihanoukville这个地方有个酒吧,说只能坐小渔船到那里.我,还有几个非常好的朋友,乘坐晚上的大巴,开始寻找这个传说中的酒吧.搜索差不多进行了一整天,每一个问过的酒吧都把我们指向另外一个酒吧.最终,我们问了出来,并在第二天早晨做短程巴士去了那个地方.</p>

<p><img src="https://lh5.googleusercontent.com/-dyNjvQtn4GA/TTZ6x3dT0WI/AAAAAAAAA_I/PMQbesSbknU/s640/DSC_0039.jpg" alt="" /></p>

<p>上面的照片上是海岸边一个10美元一晚的小木屋.从当地居民区离开后,我们的队伍像小岛上唯一的人,我们随性自由的奔跑.白天我们懒懒的躺在海滩上,吃着岛上厨师准备的鲜美可口的水果沙拉,在夜晚,我们在到处是浮游生物的海里游泳.</p>

<p><img src="https://lh4.googleusercontent.com/-lLhNdn4DxvY/TTZ74Z7MhEI/AAAAAAAAA_I/TZBf2T5pADg/s640/DSC_0115.jpg" alt="" /></p>

<p>下一站是越南,我们沿着湄公河支流来到一个边界上的小镇,我们是这里唯一的西方人,交流成了最大的问题.幸运的是,我们发现一个也许是镇上唯一会说英语的人,他骑车当我们的向导.当我的信用卡被那里的一个自动取款机吞掉了后,他提供了我很大的帮助!</p>

<p><img src="https://lh6.googleusercontent.com/-r629c1pOE2E/TVCwrLAdL2I/AAAAAAAABBY/r48a8WSsTS0/s640/DSC_0059.jpg" alt="" /></p>

<p>我们的队伍分成了几路,在我到达越南时,我的书正在按计划完成,进行的非常顺利.此时,我在西贡多待了几周,让我在书的好几章上有了重大的进展,正好是中国旧历新年,气氛非常的壮观热闹.</p>

<p>接着是日本,澳大利亚,新西兰和夏威夷.我很难把我所有的感受都在这篇文章里写出来,但说这是此生难忘的一段历程是不为过的.把如此多的美景都放到一个国家里,太让人赞叹了,我说的正是新西兰.我最喜爱的一段记忆是沿着Wanaka的一个湖边在阳光下跑步,还有就是背着食物和生活用品,徒步数天穿越Routeburn的大山.在这个国家的旅途中,我结识了好几个值得一生相伴的好友.这是一个真正的天堂.</p>

<p>就在我环绕新西兰的南部岛屿时,我的书终于完成了,提交给了技术编辑校对.</p>

<p><img src="https://lh3.googleusercontent.com/-hVGczAgcsxw/TZqg8ATYqkI/AAAAAAAABLk/OYT0p-Cq4L0/s640/DSC_0096.jpg" alt="" /></p>

<p>接下来是纽约和旧金山,这两个神奇的地方到处是天才的程序员,有些人我很幸运的认识.Techcrunch Disrupt办的很精彩(我高度推荐hackathon).</p>

<p>在从纽约到旧金山的中途停留期间,我在各种公司了进行了不少的求职面试,最终在Twitter公司找到了一份做前端开发的工作.要在那里和杰出的团队一起工作,我不能不高兴的颤抖,而去旧金山,同样也是我此生的一个梦想.</p>

<p>当签证的事办下来了后,我去了中、南美洲旅行,同时开发了我的一个小工程:一个JavaScript MVC框架库,叫做Spine.我到了哥斯达黎加,巴拿马,秘鲁,Bolvia,和阿根廷. 秘鲁是我的最爱,尽管那里的海拔给我带来了不少麻烦,我大部分的时间都在探险.下面的图片是哥斯达黎加传说中神奇猎鹰,是在我爬下世界最深的峡谷时拍到的.</p>

<p><img src="https://lh3.googleusercontent.com/-kQInzZ5DQC0/TsXiz712K7I/AAAAAAAABfk/8GfSq98ccwU/s640/DSC_0027.jpg" alt="" /></p>

<p>当我在哥斯达黎加时,微博上有个叫Roberto的家伙给我发了条信息,说他读了我的书,问我是否有兴趣一起冲浪.我欣然同意,坐上去圣何塞的汽车,在几天后和他会了面.那天我们一起在他海边的公寓里开发Spine和Ruby项目,使用移动硬盘,用汽车电源给笔记本充电.当电量不足后,让太阳能板补充能量,我们去冲浪.</p>

<p><img src="https://lh5.googleusercontent.com/-ydIJPFqgspY/TsXgVzCENyI/AAAAAAAABfY/nkOE1Y0N-X4/s640/DSC_0300.jpg" alt="" /></p>

<p>我推荐大家去写一本书,特别是边旅游边写书.可以想象,如果我不去旧金山去看一看,我可能还在旅途中,做顾问,去创业.当作家并不能让你直接的挣到很多钱,但它绝对能提升你的身份地位,给你带来很多潜在的机会.事实上,写作过程让我真正享受的是,我可以认真深入的研究一个题目.</p>

<p><img src="http://ittopic.gotoip1.com/qee/wordpress/wp-content/uploads/2011/12/DSC_0069.jpg" alt="" /></p>

<p>这一年是我这辈子目前为止最好的一年,而我感觉今后的一年会更好.当我如今定居下来后,我并没有感觉旅行对我的吸引力减少了；我始终把签证放到一个口袋里,而另一个口袋里装着钱包,当召唤降临,随时准备离开.</p>

<p>可是,这篇文章并不是关于我的旅行,它是要发送一个信号:</p>

<p>对于程序员来说,有个得天独厚的条件,就是这种职业可以远程工作或边旅游边工作,这是其它职业办不到的.当然,也不都是这样,在我的旅途中,我没有碰到第二个跟我的做法相似的程序员.这种情况让人悲哀.我想向程序员们送出的信息是,不要再找借口了,行动起来,你可以做到.一个人只有一生,我可以向你保证,这样的生活才不枉世间走这一遭.</p>

<p>就像我,我感到极度的幸运,能这样的生活,去发现我的热情所在,去做每天我喜欢做的事情.你可以看出,大部分我现在的境遇并非偶然或侥幸,这是计划,追求,工作的结果.</p>

<p>一份汗水,一份收成.</p>

<p>这篇文章的目标不是做一些自我陶醉似的炫耀和大话,而是向大家演示如何立下目标,鼓励大家去做相似的事情.想清楚你现在的处境,这一年内你想得到什么,制定出一系列具体的能让你到达这些目标的步骤.追随你的梦想.</p>

<p>原文来自Alex MacCaw <a href="http://alexmaccaw.co.uk/posts/traveling_writing_programming">Traveling Writing Programming</a><br/>
本译文出自外刊IT评论 <a href="http://www.aqee.net/traveling-writing-programming/">旅行,写作,编程</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding Publications and Subscriptions]]></title>
    <link href="http://xguox.github.com/blog/2013/04/10/understanding-publications-and-subscriptions/"/>
    <updated>2013-04-10T14:22:00+08:00</updated>
    <id>http://xguox.github.com/blog/2013/04/10/understanding-publications-and-subscriptions</id>
    <content type="html"><![CDATA[<h5>LEVEL: INTERMEDIATE</h5>

<p>Publications &amp; subscriptions 是在Meteor里最基本也是最重要的概念之一, 但同时也是最难理解的. 很大程度上是由于这其中跟传统的构建web的方式有很大的不同.<br/>
过去, 我们习惯思考,定义API用在客户端和服务器之间进行数据传递, 而在Meteor中, 客户端和服务端的数据是同步的. 我们使用publications来精确地控制如何同步. <br/>
最初人们觉得这个概念有一些难以理解的部分原因是由于Meteor像"魔术"那样为我们做了这一切. 这些"魔术"都非常有用, 而具体发生了什么则都被掩盖封装起来了(就如魔术为何如此奇幻一样). 那么, 现在就让我们拨开这些魔术表层的面纱一探究竟. 在此, 我们将会学习到一到两个窍门.</p>

<h2>Defining Publications</h2>

<p>从本质上讲, <strong>publication</strong>(使用<strong>subscription</strong>与之相连)是从服务端(源)collection到客户端(目标)collection的传递数据方法. 同时, 把subscription想象成一个漏斗连接着标准的数据存储(与mongodb数据库交互的源集合)与客户端缓存(目标集合, 相应数据的备份或者子集).</p>

<p><strong>subscription</strong>精确地控制着哪些数据该通过这个漏斗, 同时负责同步两端的数据. 通过添加多个<strong>subscription</strong>到服务端数据存储, 我们就可以实时地, 有效地, 安全地保持各个客户端的数据同步.</p>

<!-- more -->


<p>这里头所用的隧道协议叫作 <strong>DDP</strong>(Distributed Data Protocol). 想要了解更多关于DDP可以观看Matt DeBergalis(Meteor的founder之一)在(<a href="http://2012.realtimeconf.com/video/matt-debergalis">The Realtime Conference</a>上的演讲. 又或者是 Chris Mather的<a href="http://www.eventedmind.com/posts/meteor-subscriptions-and-ddp">这个视频</a>更详细的为你介绍DDP的概念.</p>

<p>现在, 我们了解了基础部分, 让我们往更深层探个究竟吧.</p>

<h2>Autopublish</h2>

<p>当你创建了一个最基本的Meteor应用之后(比如使用 <code>meteor create</code>), 它会自动的启用 <strong>autopublish</strong>这个package. 首先的, 我们先来看看它究竟为干了些什么.</p>

<p><strong>autopublish</strong>是移除了对subscriptions的需要还是只为你保管subscriptions 这取决于你如何看待它. <strong>autopublish</strong>所做的是自动地把服务端的所有数据镜像到客户端.
<img src="http://www.themeteorbook.com/images/book/autopublish@2x.png" alt="" /></p>

<p>这是怎么做到的呢? 假设你在服务端有个<code>posts</code>的集合. 那么 <strong>autopublish</strong>会自动把在Mongo 的posts 集合所找到的每一个post发送到客户端给一个也同样叫posts 的集合.</p>

<p>所以, 如果你使用<code>autopublish</code>, 你就不用再去管subscriptions了. 数据在哪都可以访问, 所有事情变得各种简单. 当然, 很明显这是有问题的, 你不可能在每一个用户的机器上都缓存有你的整个app的数据库备份.</p>

<p>出于这个原因, <strong>autopublish</strong>只适合用在你的app刚起步还没考虑到subscriptions的时候.</p>

<h2>Publishing Full Collections</h2>

<p>当你移除掉autopublish以后, 很快你就会发现你的数据都会在客户端消失不见. 有一种方法可以很简单地取回这些数据, 那就是简单的复刻<code>autopublish</code>, 并把一个collection全部publish. 例如:</p>

<p><code>javascript
Meteor.publish('allPosts',function(){
  return Posts.find();
});
</code>
<img src="http://www.themeteorbook.com/images/book/fullcollection@2x.png" alt="" /></p>

<p>同样地, 我们也还是把整个collection都publish了, 所不同的是, 现在对哪个collection进行publish是可控的. 在上边这个例子, 我们publish了<code>posts</code> collection, 而<code>comments</code> collection没有被publish.</p>

<h2>Publishing Partial Collections</h2>

<p>更高一级的粒度控制是只publish某个collection的一部分. 比如, 只作用于属于某个author的posts:</p>

<p><code>javascript
Meteor.publish('somePosts',function(){
  return Posts.find({'author':'Tom'});
});
</code></p>

<p><img src="http://www.themeteorbook.com/images/book/partialcollection@2x.png" alt="" /></p>

<p>代码都很简单, 但是究竟在底层发生了些什么呢?</p>

<p>如果你有读过<a href="http://docs.meteor.com/#publishandsubscribe">Meteor的文档</a>, 可能会对<code>added()</code>和<code>ready()</code>在客户端设置记录的属性感到惊讶,  and struggled to square that with the Meteor apps that you&rsquo;ve seen that never use those methods.(I am so sorry 这句没想着怎么翻译好)</p>

<p>这其中的原因是, Meteor提供了一个非常重要的便利 &ndash; <code>_publishCursor()</code>方法. 可能你从没见过它的使用? 因为有可能不是直接的调用,但如果你在调用一个publish函数并返回一个<strong>游标(cursor)</strong>(例如: <code>Posts.find({'author':'Tom'})</code>), 那么这就是<code>_publishCursor</code>.</p>

<p>当Meteor看到<code>somePosts</code>这个publication返回来一个游标(cursor), 则表明它自动调用了<code>_publishCursor()</code>publish这个cursor. 下面这是<code>_publishCursor()</code>所做的事情:</p>

<ul>
<li>在服务端查找这个名字的collection</li>
<li>从cursor中取得所有匹配的documents并发送到客户端的同名集合(在这用到的是<code>added()</code>)</li>
<li>只要某个document被增删改, 都会被同步到客户端(在cursor上使用<code>.observe()</code>, 并使用<code>.added()</code> <code>.updated()</code> <code>.removed()</code>来完成)</li>
</ul>


<p>那么,在上边的例子, 我们就可以很简便地确保只有用户感兴趣的posts(written by Tom)会出现在他们的客户端缓存之中.</p>

<h2>Publishing Partial Properties</h2>

<p>在上边我们已经看到了如何publish我们的一部分posts, 但是我们还可以做的更精确一些. 下面看看如何publish特定的记录吧. <br/>
<img src="http://www.themeteorbook.com/images/book/partialproperties@2x.png" alt="" /></p>

<p>跟前边的一样, 我们先用<code>find()</code>得到一个cursor, 不过这一次我们会排除掉一些</p>

<p>```javascript
Meteor.publish(&lsquo;allPosts&rsquo;,function(){
  return Posts.find({}, {fields: {</p>

<pre><code>author: false
</code></pre>

<p>  }});
});
```</p>

<p>当然的, 我们还能够结合这两种技巧. 比如我们想要返回所有来自Tom的posts同时, 可以这么写</p>

<p>```javascript
Meteor.publish(&lsquo;allPosts&rsquo;,function(){
  return Posts.find({&lsquo;author&rsquo;:&lsquo;Tom&rsquo;}, {fields: {</p>

<pre><code>author: false
</code></pre>

<p>  }});
});
```</p>

<h2>总结</h2>

<p>现在, 我们已经知道了如何publish从所有collections的所有documents的所有属性(通过<code>autopublish</code>)到特定collections的特定documents的特定记录.</p>

<p>这包括了你能用Meteor的subscription所能做的所有基本东西, 而这些简单的技巧应该</p>

<p>有时候, 你可能会需要更深层的组合, 联接, 合并 publication, 而这些我们将会再找个时间详谈.</p>

<p>原文来自Tom Coleman <a href="http://www.themeteorbook.com/2013/04/05/publications-and-subscriptions/">Understanding Publications and Subscriptions</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 Use Cases for Icon Fonts]]></title>
    <link href="http://xguox.github.com/blog/2013/03/25/5-use-cases-for-icon-fonts/"/>
    <updated>2013-03-25T15:48:00+08:00</updated>
    <id>http://xguox.github.com/blog/2013/03/25/5-use-cases-for-icon-fonts</id>
    <content type="html"><![CDATA[<p>Icon fonts非常的强大:</p>

<ul>
<li>You can CSS the crap out of them and they don&rsquo;t mind.</li>
<li>在任何的显示器和分辨率上看起来都很不错</li>
<li>无论多大的icons集都只需要一次HTTP请求</li>
</ul>


<p>下面来看看5个典型的icon fonts用例.</p>

<h2>在开始之前</h2>

<p>为了让代码保持整洁和高可读性, 我们将不会用到浏览器前缀. 我们会用到的东西诸如animations, transitions, and transforms, 所有的这些为了确保更好的浏览器支持一般都需要添加hack前缀. 在这里你想如何处理浏览器前缀问题<a href="http://css-tricks.com/how-to-deal-with-vendor-prefixes/">由你自己决定</a>.</p>

<!-- more -->


<p>正如你在例子中可以看到的, 我使用的是icon fonts托管服务<a href="http://weloveiconfonts.com/">weloveiconfonts.com</a>. 这是一个我自己的项目&mdash;原本想写一篇文章关于icon-fonts, 搜索发现没有免费的icon fonts托管服务, 于是就新建了这么个项目来完成这篇文章.</p>

<h2>1. CSS Loader</h2>

<p>现今有许多<a href="http://codepen.io/stuffit/pen/vlfyA">很棒的</a>, <a href="http://codepen.io/FWeinb/pen/BeJLo">纯</a>CSS Loader, 你也可以在<a href="http://cssload.net/">cssload.net</a>上创建你自己的Loader. 而除此之外我们还可以使用<a href="http://css-tricks.com/flat-icons-icon-fonts/">icon fonts</a>来完成. 你可以使用一个看起来像Loading的符号,然后用CSS让其<a href="http://docs.webplatform.org/wiki/css/properties/animation/animation">动起来</a>.</p>

<p>以下这是基本的HTML. 开始是三个loader, 他们都是<code>div.wrapper</code>的子元素. 第四个(<code>div.complex</code>)是由两个icons组成.</p>

<p>```html</p>

<div class="wrapper">
  <span class="fontelico-spin1"></span>
  <span class="fontelico-spin3"></span>
  <span class="fontelico-spin5"></span>
</div>




<div class="complex">
  <span class="fontelico-emo-devil"></span>
  <span class="fontelico-spin4"></span>
</div>


<p>```
导入icon font <a href="https://github.com/fontello/fontelico.font">Fontelico</a>到你的CSS之中.</p>

<p><code>css
@import url(http://weloveiconfonts.com/api/?family=fontelico);
  font-family: 'fontelico', sans-serif;
}
</code>
给元素添加名为<code>load</code>的动画, 使得这些元素360度旋转, 可适当做一些调整或者更改颜色.</p>

<p>```css
/<em> Normal (left) </em>/
span {
  float: left;
  text-align: center;
  margin: 0 5em;
  animation: load 1.337s infinite ease-out reverse;
}
/<em> Fast (center) </em>/
.wrapper span:nth-child(2) {
  animation: load .5s infinite linear;
}
/<em> Steps (right) </em>/
.wrapper span:nth-child(3) {
  animation: load 1.25s infinite steps(18, end) forwards;
}
@keyframes load {
  0% {</p>

<pre><code>transform: rotate(0) scale(1, 1);
color: rgba(0, 0, 0, .5);
</code></pre>

<p>  }
  10% { color: rgba(0, 120, 0, .5); }
  20% { color: rgba(0, 120, 120, .5); }
  30% { color: rgba(120, 120, 0, .5); }
  40% { color: rgba(0, 0, 120, .5); }
  50% {</p>

<pre><code>transform: rotate(180deg) scale(1.85, 1.85);
color: rgba(120, 0, 0, .5);
</code></pre>

<p>  }
  100% {</p>

<pre><code>transform: rotate(360deg) scale(1, 1);
color: rgba(0, 0, 0, .5);
</code></pre>

<p>  }
}
<code>``
将最后的那个loader(</code>div.complex<code>) 的两个icons堆叠在最上层. 第一个子元素为devil形状的icon(用的是名为</code>rotate<code>的动画), 第二个子元素为spin icon(使用名为</code>scale`的动画).</p>

<p>```css
.complex span:nth-child(1),
.complex span:nth-child(2) {
  position: absolute;
  margin: 0;<br/>
  width: 1em;
  height: 1em;
}
/<em> Devil icon  </em>/
.complex span:nth-child(1) {
  animation: load 1.25s infinite steps(18, end) forwards;
}
/<em> Spin icon </em>/
.complex span:nth-child(2) {
  font-size: 3em;
  left: &ndash;.35em;
  top: &ndash;.35em;
  color: rgba(0, 0, 0, .3);
  animation: devil 3s infinite linear reverse forwards;
}
@keyframes devil {
  0% {</p>

<pre><code>transform: scale(-1.85, 1.85);
</code></pre>

<p>  }
  50% {</p>

<pre><code>transform: scale(1.85, -1.85);
</code></pre>

<p>  }
  100% {</p>

<pre><code>transform: scale(-1.85, 1.85);
</code></pre>

<p>  }
}
```
<pre class="codepen" data-height="300" data-type="result" data-href="FCsHe" data-user="TimPietrusky"><code></code></pre>
<script async src="http://codepen.io:/assets/embed/ei.js"></script></p>

<h2>SocialCount meets Style</h2>

<p>人们都喜欢在他们的网站上使用一些社交分享按钮, 从而使得访问者可以轻易的传播他们的内容. 但是当你如果添加Facebook, Twitter, Google+, 那么你将要面临的是大约309KB的空缓存负载量. 这就是<a href="https://github.com/filamentgroup/SocialCount">SocialCount jQuery plugin</a>所存在的原因. SocialCount是渐进增强的, 并且可以lazy loaded以及对移动设备比较友好.</p>

<p>它的默认样式很简单且在iframe中包含的buttons也很少. 下面, 让我们为这些buttons添加一些CSS花样.</p>

<p>以下的HTML是由<a href="SocialCount%20markup%20generator">SocialCount markup generator</a>所创建. 其实也就是一些包含着链接和icons的无序列表.</p>

<p>```html</p>

<ul
  class="socialcount"
  data-url="http://www.google.com/"
  data-counts="true"
  data-share-text="Google is a search engine">
 
  <li class="facebook">
    <a href="https://www.facebook.com/sharer/sharer.php?u=http://www.google.com/" title="Share on Facebook">
      <span class="count entypo-thumbs-up"></span>
    </a>
  </li>

  <li class="twitter">
    <a href="https://twitter.com/intent/tweet?text=http://www.google.com/" title="Share on Twitter">
      <span class="count entypo-twitter"></span>
    </a>
  </li>

  <li class="googleplus">
    <a href="https://plus.google.com/share?url=http://www.google.com/" title="Share on Google Plus">
        <span class="count entypo-gplus"></span>
    </a>
  </li>

</ul>


<p>```
接着在CSS中导入icon font(Entypo)</p>

<p><code>css
@import url(http://weloveiconfonts.com/api/?family=entypo);
  font: 2.5em/1.9em 'entypo', sans-serif;
}
</code>
然后是重写SocialCount提供的默认样式:</p>

<ul>
<li>加入transition</li>
<li>缩放iframe</li>
<li>给buttons设定自定义的背景</li>
</ul>


<blockquote><p>Editor&rsquo;s note: 以下的CSS所使用的是SASS的一种格式SCSS.  包括后边的也是. 如果你想要使用标准的CSS, 可以跳转到下边的CodePen 演示链接,  在CSS编辑框头部点击"SCSS", 然后就可以看到经过编译后的标准CSS</p></blockquote>

<p>```sass
.socialcount {</p>

<blockquote><p>li {</p>

<pre><code>width: 33%;
border-radius: 0;
transition: all .3s ease-in-out;
cursor: pointer;
</code></pre></blockquote>

<pre><code>&amp;:hover [class*="entypo-"]:before {
  opacity: 0;  
}
</code></pre>

<p>  }</p>

<p>  iframe {</p>

<pre><code>transform: scale(1.65, 1.65);    
</code></pre>

<p>  }</p>

<p>  .button {</p>

<pre><code>top: 50%;
margin: -.75em 0 0 0;
height: 2em;
</code></pre>

<p>  }</p>

<p>  .facebook {</p>

<pre><code>background: rgba(59, 89, 152, .7);
</code></pre>

<p>  }</p>

<p>  &amp;.like .facebook iframe {</p>

<pre><code>width: 8em;
</code></pre>

<p>  }</p>

<p>  .twitter {</p>

<pre><code>background: rgba(0, 172, 237, .7);  
</code></pre>

<p>  }</p>

<p>  .googleplus {</p>

<pre><code>background: rgba(172, 0, 0, .7);  
</code></pre>

<p>  }
}
```
<pre class="codepen" data-height="300" data-type="result" data-href="Czfyu" data-user="TimPietrusky"><code></code></pre>
<script async src="http://codepen.io:/assets/embed/ei.js"></script></p>

<h2>3.Enhanced lists</h2>

<p>下边的三个例子都基于下边这个简单的HTML</p>

<p>```html</p>

<div>
  <h2>Title</h2>
  <ul class="style">
    <li data-text="">Text</li>
    <li data-text="">Text</li>
    <li data-text="">Text</li>
  </ul>
</div>


<p>```
导入 icon font (Font Awesome)到你的CSS</p>

<p><code>css
@import url(http://weloveiconfonts.com/api/?family=fontawesome);
  font-family: 'FontAwesome', sans-serif;
}
</code>
为列表, 列表元素, <a href="http://css-tricks.com/almanac/selectors/a/after/">伪元素</a>以及button添加默认样式. 在这里我们不使用class来设定列表元素下的icon的样式, 取而代之是我们改变元素的<code>content</code>属性来创建一个伪元素.</p>

<p>```css
ul {
  list-style: none;
  padding: 0;</p>

<p>  li {</p>

<pre><code>position: relative;
min-height: 2em;
padding: .3em .3em .3em 1.5em;
transition:
  background .3s ease-in-out,
  color .3s ease-in-out,
  box-shadow .1s ease-in-out,
  height .25s ease-in-out
</code></pre>

<p>   ;</p>

<pre><code>button {
  position: absolute;
  left: 1.45em;
  bottom: .35em;
  opacity: 0;
  height: 0;
  border: none;
  font-size: .8em;
  cursor: pointer;
  transition: all .4s ease-in-out;
}

&amp;:before {
  position: absolute;
  top: .425em;
  font-family: 'FontAwesome', sans-serif;
  margin: 0 .35em 0 -1.35em;
  vertical-align: bottom;
}
&amp;:hover {
  button {
    opacity: 1;
    height: 2em;
  }

  &amp;:before {
    color: rgba(255, 255, 255, 1);
    right: 0;
    transform: scale(2.5, 2.5) translate(-.25em, .15em);
  }
  &amp;:after {
    position: absolute;
    content: attr(data-text);
  }
}
</code></pre>

<p>  }
}
```</p>

<h3>3.1 Stuff You Love</h3>

<p>第一个示例很简单. 使用的是一个心形而不是默认的列表样式加特定的hover: icon会被移到右侧, 另外<code>::after</code>伪元素得到data-text这个<a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/elements.html#embedding-custom-non-visible-data-with-the-data-*-attributes">data-attribute</a>的文本</p>

<p>```css
.love {
  li {</p>

<pre><code>&amp;:before {
  /* fontawesome-heart */
  content: "\f004";
}
&amp;:before,
&amp;:after {
  color: rgba(220, 20, 20, .6);
}
&amp;:hover {
  background: rgba(220, 20, 20, .6);

  &amp;:after {
    width: 2em;
    right: .445em;
  }
}
</code></pre>

<p>  }
}
```</p>

<h3>3.2 Downloads</h3>

<p>这是一个自定义列表下载扩展标记: 每个列表元素有一个链接和一个icon. 按钮被隐藏了, 只有当hover的时候才显示.</p>

<p>```css
.downloads {
  li {</p>

<pre><code>border-bottom: .15em solid rgba(0, 0, 0, .3);

&amp;:before {
  /* fontawesome-download-alt */
  content: "\f019";
  color: rgba(50, 50, 50, .5);
}
&amp;:hover {
  background: rgba(0, 140, 0, .7);
  height: 4em;

  &amp;:after {
    right: .35em;
  }

  &amp;:before {
    color: rgba(255, 255, 255, .2);
  }
}
</code></pre>

<p>  }
}
```</p>

<h3>3.3 Your account</h3>

<p>用户菜单的UI. 当你hover在一个列表元素上的时候, icon移动到右侧并且box-shadow填满整个背景. 基于<code>:nth-child</code>选择器和<code>content</code>属性, 每个列表元素都有一个自己的icon.</p>

<p>```css
.account {
  padding: .75em;
  border: .15em solid rgba(0, 0, 0, .2);
  background-color: rgba(0, 0, 0, .7);
  background-image: radial-gradient(center, ellipse cover, rgba(104,104,104,0.6) 0%,rgba(23,23,23,0.7) 100%);
  box-shadow: inset 0 0 .35em 0 rgba(0, 0, 0, .2);
  color: rgba(255, 255, 255, .6);
  backface-visibility: hidden;</p>

<p>  li {</p>

<pre><code>cursor: pointer;

&amp;:nth-child(1):before {
  /* fontawesome-heart-empty */
  content: "\f08a";
}
&amp;:nth-child(2):before {
  /* fontawesome-glass */
  content: "\f000";
}
&amp;:nth-child(3) {
  margin-bottom: 1em;

  &amp;:before {
  /* fontawesome-comment */
    content: "\f075";
  }
}
&amp;:nth-child(4) {
  margin-bottom: .5em;

  &amp;:before {
  /* fontawesome-cog */
     content: "\f013";
  }
}
&amp;:nth-child(5):before {
  /* fontawesome-signout */
  content: "\f08b";
}
&amp;:hover {
  color: rgba(255, 255, 255, 1);
  padding-left: 1.5em;
  box-shadow: inset 0 0 0 10em rgba(255, 255, 255, .5);

  &amp;:before {
    color: rgba(255, 255, 255, 1);
    transform: none;
  }  
}
</code></pre>

<p>  }
}
```
<pre class="codepen" data-height="300" data-type="result" data-href="tcklJ" data-user="TimPietrusky"><code></code></pre>
<script async src="http://codepen.io:/assets/embed/ei.js"></script></p>

<h2>4. Emocons.js jQuery Plugin</h2>

<p><a href="https://github.com/TimPietrusky/emocons">Emojons.js</a>是一个搜索元素里特定字符序列内容的jQuery插件. 所有匹配上的都会用一个<code>span</code>和相应的icon HTML class来替换.<br/>
例如, 一个聊天app:</p>

<p>```html</p>

<div class="chat">
    :D :) ;) :'( :o :/ :( B) :P :|
    :beer: :devil: :shoot: :coffee: :thumbsup: :angry: :ueber-happy:
</div>


<p>```
接着在你的元素上调用 Emocons.js 插件的方法</p>

<p><code>javascript
$('.chat').emocons();
</code>
现在, 所有在聊天时候的元素都会被转换成这样:</p>

<p><code>html
&lt;span class="fontelico-emo-grin go" title=":D"&gt;&lt;/span&gt;
</code>
在CSS中导入icon font(Fontelico):</p>

<p><code>css
@import url(http://weloveiconfonts.com/api/?family=fontelico);
  font-family: 'fontelico', sans-serif;
}
</code>
当 Emocons.js 把一个字符串转换成表情符号时, 会给<code>span</code>元素增加一个<code>go</code>类(添加一个动画效果).</p>

<p>```css
.go {
  animation: hey .55s 1 linear;
}
@keyframes hey {
  0% {</p>

<pre><code>transform: scale(1, 1);
</code></pre>

<p>  }
  50% {</p>

<pre><code>transform: scale(1.85, -1.85);
</code></pre>

<p>  }
  100% {</p>

<pre><code>transform: scale(1, 1);
</code></pre>

<p>  }
}
<code>``
一些表情符号会有特殊的样式(如颜色的改变)或者通过</code>::after`伪元素添加一些东西</p>

<p>```css
.fontelico-emo-devil {
  color:rgba(180, 0, 0, .9);
}
.fontelico-emo-beer:after {
  box-shadow:</p>

<pre><code>-.475em .75em 0 .275em rgba(220, 220, 0, 1),
-.185em .675em 0 .175em rgba(220, 220, 0, 1)
</code></pre>

<p>  ;  <br/>
}
.fontelico-emo-coffee:after {
  box-shadow:</p>

<pre><code>-.475em .78em 0 .235em rgba(222, 184, 135, 1),
-.215em .715em 0 .155em rgba(222, 184, 135, 1)
</code></pre>

<p>  ;  <br/>
}
.fontelico-emo-shoot:after {
  border-radius: .15em;
  box-shadow: .315em .525em 0 .1em rgba(0, 0, 0, 1);  <br/>
}
.fontelico-emo-angry:after {
  border-radius: .15em;
  box-shadow: &ndash;.695em .455em 0 .085em rgba(0, 220, 0, .6);
  z-index: 2;
}
```
<pre class="codepen" data-height="300" data-type="result" data-href="KloGD" data-user="TimPietrusky"><code></code></pre>
<script async src="http://codepen.io:/assets/embed/ei.js"></script></p>

<h2>5. Parallax Movie #1337</h2>

<p>最后的这个例子只是为了好玩吧. 它只是一个试验, 使用一个icon font来创建一个无穷的parallax movie. 创建场景的HTML包含有许多的元素.</p>

<ul>
<li>The setting: sky, ground, night and sun</li>
<li>Fixed element: bicycle</li>
<li>Animated elements: Trees, giraffe, shopping cart, buildings and heliport</li>
</ul>


<p>```html</p>

<div class="night"></div>


<div class="wrapper">
  <div class="sun">
    <div class="maki-fast-food"></div>
  </div>
 
  <div class="sky"></div>
  <span class="maki-bicycle"></span>
   
  <span class="maki-tree-1" data-child="1"></span>
  <span class="maki-tree-1" data-child="2"></span>
  <span class="maki-tree-1" data-child="3"></span>
   
  <span class="maki-giraffe"></span>
  <span class="maki-grocery-store"></span>
   
  <span class="maki-commerical-building" data-child="1"></span>
  <span class="maki-commerical-building" data-child="2"></span>
   
  <span class="maki-heliport"></span>
   
  <div class="ground"></div>
</div>


<p>```
在CSS中导入 icon font(Maki):</p>

<p><code>css
@import url(http://weloveiconfonts.com/api/?family=maki);
[class*="maki-"] {
  position: absolute;
  margin: 0;  
  color: #fff;
  font-size: 2em;
}
  font-family: 'maki', sans-serif;
}
*:after {
  position: absolute;
  top: 0;
  right: 0;
  content: '';
  z-index: -1;
  width: 0;
  height: 0;
}
</code>
整个场景旋转 &ldquo;-3度&rdquo;.</p>

<p><code>css
.wrapper {
  height: 140%;
  width: 120%;
  transform: rotate(-3deg) translate(-10%, -15%);    
}
</code>
当日落西山后, 场景变换为夜晚</p>

<p><code>css
.night {
  position: absolute;
  z-index: 5;
  width: 100%;
  height: 100%;
  animation: night 45s infinite forwards;
}
@keyframes night {
  0%, 30%, 100% {background:rgba(0, 0, 0, 0);}  
  55% {background: rgba(0, 0, 0, .6);}
}
</code>
sky与ground都用的是同样的<code>background-position</code>动画, 只是速度有所不同.</p>

<p><code>css
.sky {
  position: relative;
  z-index: 0;
  background: url(http://subtlepatterns.subtlepatterns.netdna-cdn.com/patterns/bedge_grunge.png);
  height: 50%;    
  width: 100%;
  animation: rollin-bg 25s linear infinite forwards;
}
.ground {
  position: absolute;
  z-index: 1;
  background: url(http://subtlepatterns.subtlepatterns.netdna-cdn.com/patterns/blackorchid.png);
  height: 50%;    
  width: 100%;
  animation: rollin-bg 7s linear infinite forwards;
}
@keyframes rollin-bg {
  0% { background-position: 100%; }  
  100% { background-position: 0; }
}
</code>
<a href="http://lea.verou.me/2012/02/moving-an-element-along-a-circle/">沿着圆周移动一个元素</a>(the burger-sun)</p>

<p><code>css
.sun {
  position: absolute;
  z-index: 1;
  left: 50%;
  top: 10%;
  width: 2em;
  height: 2em;
  font-size: 4em;
  line-height: 1;
  animation: circle 45s linear infinite;
  transform-origin: 50% 3.85em;
}
.sun [class*="maki-"] {
  color: rgba(240, 180, 0, .2);
  text-shadow: 0 0 .35em rgba(240, 240, 0, .7);
}
.sun &gt; div {
  animation: inner-circle 45s linear infinite;
}
@keyframes circle {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}
@keyframes inner-circle {
  from { transform: rotate(0deg); }
  to { transform: rotate(-360deg); }
}
</code></p>

<p>以下这个是唯一一个没有使用动画效果的元素, 但它看起来还是在移动.</p>

<p><code>css
.maki-bicycle {
  left: 50%;
  z-index: 4;
  margin: -.85em 0 0 -.5em;
  color: rgba(30, 30, 140, .95);
}
</code>
这里全都是使用同样的滚动动画, 但速度不一的元素.</p>

<p>```css
.maki-tree-1[data-child=&ldquo;1&rdquo;] {
  margin: -1em 0 0 5%;
  z-index: 5;
  animation: rollin 5s linear infinite;
  font-size: 2.4em;
  color: rgba(0, 110, 0, .8);
}
.maki-tree-1[data-child=&ldquo;2&rdquo;] {
  margin: -1em 0 0 85%;<br/>
  z-index: 2;
  animation: rollin 12s linear infinite;
  font-size: 1.6em;
  color: rgba(0, 110, 0, .5);
}
.maki-tree-1[data-child=&ldquo;3&rdquo;] {
  margin: -1em 0 0 25%;<br/>
  z-index: 2;
  animation: rollin 17s linear infinite;
  font-size: 1.2em;
  color: rgba(0, 110, 0, .3);
}
.maki-giraffe {
  margin: .25em 0 0 5%;<br/>
  z-index: 6;
  animation: rollin 12s linear infinite reverse;
  font-size: 10em;
  color: rgba(255, 255, 10, .9);
}
.maki-giraffe:after {
  right: -3em;
  content: &lsquo;\e82a \e82a \e82a \e82a \e82a&rsquo;;
  font: .2em &lsquo;Maki&rsquo;, sans-serif;
  letter-spacing: .2em;
  width: 3em;
  color: rgba(0, 0, 0, .6);
  box-shadow:</p>

<pre><code>0 .45em 0 .75em rgba(255, 255, 255, .4),
1em .35em 0 .75em rgba(255, 255, 255, .4),
2.25em .25em 0 1.05em rgba(255, 255, 255, .4)  
</code></pre>

<p>  ;
  border-radius: 50%;
  transform: translate(2.3em, .55em) rotateY(-180deg);
}
.maki-grocery-store {
  margin: &ndash;.35em 0 0 5%;
  z-index: 5;
  animation: rollin 22s linear infinite;
  font-size: 4em;
  color: rgba(220, 0, 10, .7);
}
.maki-commerical-building[data-child=&ldquo;1&rdquo;] {
  margin: -1em 0 0 5%;
  z-index: 3;
  animation: rollin 6s linear infinite;
  font-size: 7em;
  color: rgba(120, 0, 120, .8);
}
.maki-commerical-building[data-child=&ldquo;2&rdquo;] {
  margin: -1em 0 0 5%;
  z-index: 2;
  animation: rollin 14s linear infinite;
  font-size: 4em;
  color: rgba(0, 120, 120, .4);
}
.maki-heliport {
  margin: -3.5em 0 0 2em;<br/>
  z-index: 1;
  color: rgba(30, 30, 30, .45);
  font-size: 1.25em;
  animation: rollin 26s linear infinite reverse 2s;
}
@keyframes rollin {
  0% {margin-left:105%}<br/>
  100% {margin-left:-15%;}
}
```
<pre class="codepen" data-height="300" data-type="result" data-href="ELuiG" data-user="TimPietrusky"><code></code></pre>
<script async src="http://codepen.io:/assets/embed/ei.js"></script></p>

<p>原文来自 Tim Pietrusky <a href="http://css-tricks.com/five-use-cases-for-icon-fonts/">5 Use Cases for Icon Fonts</a></p>
]]></content>
  </entry>
  
</feed>
